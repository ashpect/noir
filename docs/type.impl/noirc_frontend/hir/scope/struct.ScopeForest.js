(function() {
    var type_impls = Object.fromEntries([["noirc_frontend",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-ScopeForest%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#169-173\">Source</a><a href=\"#impl-Default-for-ScopeForest%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, V&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"noirc_frontend/hir/scope/struct.ScopeForest.html\" title=\"struct noirc_frontend::hir::scope::ScopeForest\">ScopeForest</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#170-172\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.85.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","noirc_frontend::elaborator::ScopeForest"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ScopeForest%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#120-167\">Source</a><a href=\"#impl-ScopeForest%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, V&gt; <a class=\"struct\" href=\"noirc_frontend/hir/scope/struct.ScopeForest.html\" title=\"struct noirc_frontend::hir::scope::ScopeForest\">ScopeForest</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.current_scope_tree\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#121-123\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir/scope/struct.ScopeForest.html#tymethod.current_scope_tree\" class=\"fn\">current_scope_tree</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"noirc_frontend/hir/scope/struct.ScopeTree.html\" title=\"struct noirc_frontend::hir::scope::ScopeTree\">ScopeTree</a>&lt;K, V&gt;</h4></section><section id=\"method.current_scope_index\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#125-130\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir/scope/struct.ScopeForest.html#tymethod.current_scope_index\" class=\"fn\">current_scope_index</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut_scope\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#133-135\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir/scope/struct.ScopeForest.html#tymethod.get_mut_scope\" class=\"fn\">get_mut_scope</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"noirc_frontend/hir/scope/struct.Scope.html\" title=\"struct noirc_frontend::hir::scope::Scope\">Scope</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the last pushed scope from the current scope tree</p>\n</div></details><section id=\"method.extend_current_scope_tree\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#137-139\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir/scope/struct.ScopeForest.html#tymethod.extend_current_scope_tree\" class=\"fn\">extend_current_scope_tree</a>(&amp;mut self)</h4></section><section id=\"method.remove_scope_tree_extension\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#141-143\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir/scope/struct.ScopeForest.html#tymethod.remove_scope_tree_extension\" class=\"fn\">remove_scope_tree_extension</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"noirc_frontend/hir/scope/struct.Scope.html\" title=\"struct noirc_frontend::hir::scope::Scope\">Scope</a>&lt;K, V&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_function\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#147-149\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir/scope/struct.ScopeForest.html#tymethod.start_function\" class=\"fn\">start_function</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Starting a function requires a new scope tree, as you do not want the functions scope to\nhave access to the scope of the caller</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.end_function\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#153-155\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir/scope/struct.ScopeForest.html#tymethod.end_function\" class=\"fn\">end_function</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"noirc_frontend/hir/scope/struct.ScopeTree.html\" title=\"struct noirc_frontend::hir::scope::ScopeTree\">ScopeTree</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Ending a function requires that we removes it’s whole tree of scope\nThis is by design the current scope, which is the last element in the vector</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_scope\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#159-161\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir/scope/struct.ScopeForest.html#tymethod.start_scope\" class=\"fn\">start_scope</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>The beginning of a scope always correlates with the start of a block {}.\nThis can be in if expressions, for loops, or functions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.end_scope\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/scope/mod.rs.html#164-166\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir/scope/struct.ScopeForest.html#tymethod.end_scope\" class=\"fn\">end_scope</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"noirc_frontend/hir/scope/struct.Scope.html\" title=\"struct noirc_frontend::hir::scope::Scope\">Scope</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Ends the current scope - this should correspond with the end of a BlockExpression.</p>\n</div></details></div></details>",0,"noirc_frontend::elaborator::ScopeForest"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[7831]}