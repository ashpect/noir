searchState.loadedDescShard("noirc_evaluator", 0, "Noir Evaluator has two types of errors\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSSA stands for Single Static Assignment The IR presented …\nContext structure for the brillig pass. It stores …\nOptions that affect Brillig code generation.\nProcedures are a set of complex operations that are common …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptions affecting Brillig code generation.\nCompiles the <code>Program</code> into <code>ACIR</code>.\nDump the unoptimized SSA to the supplied path if it exists\nEnable the lookback feature of the Brillig call constraints\nWidth of expressions to be used for ACIR\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe higher the value, the more inlined Brillig functions …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum accepted percentage increase in the Brillig …\nPretty print benchmark times of each code generation pass\nSkip the missing Brillig call constraints check\nSkip the check for under constrained values\nEmit debug information for the intermediate SSA IR")