searchState.loadedDescShard("noir_profiler", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a flamegraph mapping unconstrained Noir …\nThe path to the artifact JSON file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe output folder for the flamegraph svg files\nUse pedantic ACVM solving, i.e. double-check some …\nThe path to the Prover.toml file\nA single number representing the total opcodes executed. …\nEnables additional logging\nGenerates a flamegraph mapping backend opcodes to their …\nThe path to the artifact JSON file\nOptional arguments for the backend gates command\nCommand to get a gates report from the backend. Defaults …\nPath to the Noir backend binary\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe output folder for the flamegraph svg files\nThe output name for the flamegraph svg files\nGenerates a flamegraph mapping ACIR opcodes to their …\nThe path to the artifact JSON file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe output folder for the flamegraph svg files\nWhether to skip brillig functions\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReport an error from the CLI that is not reliant on a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a vector of lines in the format that inferno …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")