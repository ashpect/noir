searchState.loadedDescShard("noir_fuzzer", 0, "This module has been adapted from Foundry’s fuzzing …\nAn executor for Noir programs which provides fuzzing …\nThis module defines how to build a dictionary of values …\nA function which executes the programs with a given set of …\nReturns the argument unchanged.\nFuzzes the provided program.\nCalls <code>U::from(self)</code>.\nInstantiates a fuzzed executor given a TestRunner.\nThe program to be fuzzed\nThe fuzzer\nGranular and single-step function that runs only one fuzz …\nCollect <code>Field</code> values used in the opcodes of an ACIR …\nConstructs a <code>HashSet&lt;F&gt;</code> of values pulled from a <code>Program&lt;F&gt;</code> …\nCollect <code>Field</code> values used in the opcodes of a Brillig …\nGiven the Abi description of a program artifact, generate …\nCreate a strategy for generating random values for an …\nStrategy for signed ints (up to i128). The strategy …\nBit size of int (e.g. 128)\nThe weight for edge cases (+/- 3 around 0 and max possible …\nReturns the argument unchanged.\nGenerate random values near MIN or the MAX value.\nCalls <code>U::from(self)</code>.\nCreate a new strategy.\nThe weight for purely random values\nMaximum allowed positive number.\nMinimum allowed negative number.\nValue tree for unsigned ints (up to u128). The strategy …\nBit size of uint (e.g. 64)\nThe weight for edge cases (+/- 3 around 0 and max possible …\nA set of fixtures to be generated\nThe weight for fixtures\nReturns the argument unchanged.\nGenerate random numbers starting from near 0 or the …\nPick a random <code>FieldElement</code> from the <code>fixtures</code> as a starting …\nGenerate random values between 0 and the MAX with the …\nCalls <code>U::from(self)</code>.\nCreate a new strategy.\nPick randomly from the 3 available strategies for …\nThe weight for purely random values\nMaximum integer that fits in the given bit width.\nReturned by a single fuzz in the case of a successful run\nReturned by a single fuzz when a counterexample has been …\nOutcome of a single fuzz\nThe outcome of a fuzz test\nData of a single fuzz test case\nMinimal reproduction test case for failing fuzz tests\nMinimal reproduction test case for failing test\nThe status of the call\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf there was a constraint failure, this field will be …\nWhether the test case was successful. This means that the …")