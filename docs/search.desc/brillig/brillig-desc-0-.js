searchState.loadedDescShard("brillig", 0, "The Brillig bytecode is distinct from regular ACIR in that …\nEncrypts a message using AES128.\n(&amp;) Bitwise AND\nBinary fixed-length field expressions\nTakes the fields in addresses <code>lhs</code> and <code>rhs</code> Performs the …\nBinary fixed-length integer expressions\nTakes the <code>bit_size</code> size integers in addresses <code>lhs</code> and <code>rhs</code> …\nThese opcodes provide an equivalent of ACIR blackbox …\nCalculates the Blake2s hash of the inputs.\nCalculates the Blake3 hash of the inputs.\nWe don’t support dynamic jumps or calls See …\nCopies calldata after the offset to the specified address …\ndestination = condition &gt; 0 ? source_a : source_b\nField division\nVerifies a ECDSA signature over the secp256k1 curve.\nVerifies a ECDSA signature over the secp256r1 curve.\nPerforms addition over the embedded curve.\n(==) equal\n(==) equal\nUsed to get data from an outside source. Also referred to …\nSingle output of a foreign call.\nRepresents the full output of a foreign call.\nA fixed-sized array starting from a Brillig memory …\nAn array passed to or from an external call In the case of …\nDescribes the memory layout for an array/vector element\nA memory-sized vector passed starting from a Brillig …\nA vector passed to or from an external call In the case of …\nInteger division\nSets the program counter to the label.\nSets the program counter to the value located at …\nKeccak Permutation function of 1600 width\n(&lt;) Field less than\n(&lt;) Field less than\n(&lt;=) field less or equal\n(&lt;=) field less or equal\nA single value passed to or from an external call It is an …\nPerforms multi scalar multiplication over the embedded …\n(|) Bitwise OR\n(&lt;&lt;) Shift left\n(&gt;&gt;) Shift right\nStop execution, returning data after the offset\nUsed to denote execution failure, returning data after the …\nLays out various ways an external foreign call’s input …\n(^) Bitwise XOR\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolved output values of the foreign call.\nDestination value types\nDestination addresses (may be single values or memory …\nInterpreted by caller context, ie this will have different …\nInput value types (for heap allocated structures indicates …\nInput addresses (may be single values or memory pointers).")