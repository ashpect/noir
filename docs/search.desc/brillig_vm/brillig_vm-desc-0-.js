searchState.loadedDescShard("brillig_vm", 0, "The Brillig VM is a specialized VM which allows the ACVM …\nThe error call stack contains the opcode indexes of the …\nThe VM process is not solvable as a foreign call has been …\nVM encapsulates the state of the Brillig VM during …\nThe solver for blackbox functions\nExecutable opcodes\nCall stack\nCalldata to the brillig function\nCasts a value to a different bit size.\nSets the current status of the VM to Finished (completed …\nA counter maintained throughout a Brillig process that …\nRepresents the outputs of all foreign calls during a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the VM’s current call stack, including the …\nIncrements the program counter by 1.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory of the VM\nConstructs a new VM instance\nProcess a binary operation. This method will not modify …\nProcess a binary operation. This method will not modify …\nProcess a single opcode and modify the program counter.\nLoop over the bytecode and update the program counter\nReturns the current value of the program counter.\nInstruction pointer\nReads an array/vector from memory but recursively reads …\nIncrements the program counter by <code>value</code>. If the program …\nUpdates the current status of the VM. Returns the given …\nStatus of the VM\nSets the current status of the VM to <code>fail</code>. Indicating that …\nSets the status of the VM to <code>ForeignCallWait</code>. Indicating …\nWrites flattened values to memory, using the provided type …\nInterpreted by simulator context\nInput values Each input is a list of values as an input …\nEvaluate a binary operation on two FieldElement memory …\nEvaluate a binary operation on two unsigned big integers …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtracts the last byte of every value\nExtracts the field element from the memory value, if it is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilds a memory value from a field element, checking that …\nBuilds a field-typed memory value.\nBuilds a memory value from a field element.\nBuilds an integer-typed memory value.\nGets the value at address\nConverts the memory value to a field element, independent …\nReturns the values of the memory\nSets the value at <code>address</code> to <code>value</code>\nSets the values after <code>address</code> to <code>values</code>")