searchState.loadedDescShard("acvm_js", 0, "Performs a bitwise AND operation between <code>lhs</code> and <code>rhs</code>\nCalculates the Blake2s256 hash of the input bytes\nReturns the <code>BuildInfo</code> object containing information about …\nCompresses a <code>WitnessMap</code> into the binary format outputted …\nCompresses a <code>WitnessStack</code> into the binary format outputted …\nDecompresses a compressed witness as outputted by Nargo …\nDecompresses a compressed witness stack as outputted by …\nVerifies a ECDSA signature over the secp256k1 curve.\nVerifies a ECDSA signature over the secp256r1 curve.\nExecutes an ACIR circuit to generate the solved witness …\nExecutes an ACIR circuit to generate the solved witness …\nExecutes an ACIR circuit to generate the solved witness …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts a <code>WitnessMap</code> containing the witness indices …\nExtracts a <code>WitnessMap</code> containing the witness indices …\nExtracts a <code>WitnessMap</code> containing the witness indices …\nSets the package’s logging level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new execution error with the given call stack. …\nSha256 compression function\nPerforms a bitwise XOR operation between <code>lhs</code> and <code>rhs</code>")