---
source: test_programs/src/lib.rs
expression: "&format!(\"success: {:?}\\nexit_code: {}\\n----- stdout -----\\n{}\\n----- stderr -----\\n{}\",\noutput.status.success(), output.status.code().unwrap_or(!0), stdout, stderr)"
---
success: true
exit_code: 0
----- stdout -----
[bounded_vec] Running 22 test functions
----- stderr -----
warning: Unused expression result of type BoundedVec<Field, 10>
  â”Œâ”€ noir_test_success/bounded_vec/src/main.nr:3:5
  â”‚
3 â”‚     good();
  â”‚     ------
  â”‚

warning: unused variable v1
   â”Œâ”€ noir_test_success/bounded_vec/src/main.nr:14:9
   â”‚
14 â”‚     let v1: BoundedVec<Field, 3> = BoundedVec::new();
   â”‚         -- unused variable
   â”‚

warning: len is private and not visible from the current module
   â”Œâ”€ noir_test_success/bounded_vec/src/main.nr:32:16
   â”‚
32 â”‚     assert(vec.len == 0);
   â”‚                --- len is private
   â”‚

warning: len is private and not visible from the current module
   â”Œâ”€ noir_test_success/bounded_vec/src/main.nr:34:16
   â”‚
34 â”‚     assert(vec.len == 1);
   â”‚                --- len is private
   â”‚

warning: len is private and not visible from the current module
   â”Œâ”€ noir_test_success/bounded_vec/src/main.nr:36:16
   â”‚
36 â”‚     assert(vec.len == 2);
   â”‚                --- len is private
   â”‚

warning: len is private and not visible from the current module
   â”Œâ”€ noir_test_success/bounded_vec/src/main.nr:38:16
   â”‚
38 â”‚     assert(vec.len == 3);
   â”‚                --- len is private
   â”‚

warning: len is private and not visible from the current module
   â”Œâ”€ noir_test_success/bounded_vec/src/main.nr:41:16
   â”‚
41 â”‚     assert(vec.len == 2);
   â”‚                --- len is private
   â”‚

warning: len is private and not visible from the current module
    â”Œâ”€ noir_test_success/bounded_vec/src/main.nr:172:16
    â”‚
172 â”‚     assert(vec.len == 2);
    â”‚                --- len is private
    â”‚

warning: len is private and not visible from the current module
    â”Œâ”€ noir_test_success/bounded_vec/src/main.nr:202:16
    â”‚
202 â”‚     assert(vec.len == 1);
    â”‚                --- len is private
    â”‚

[bounded_vec] Testing test_vec_extend_from_array ... [0m[32mok[0m
[bounded_vec] Testing test_vec_get_uninitialized ... [0m[32mok[0m
[bounded_vec] Testing test_vec_extend_from_array_out_of_bound ... [0m[32mok[0m
[bounded_vec] Testing pop_docs_example ... [0m[32mok[0m
[bounded_vec] Testing len_docs_example ... [0m[32mok[0m
[bounded_vec] Testing set_unchecked_example ... [0m[32mok[0m
[bounded_vec] Testing test_vec_push_pop ... [0m[32mok[0m
[bounded_vec] Testing test_vec_extend_from_bounded_vec ... [0m[32mok[0m
[bounded_vec] Testing test_vec_extend_from_array_twice_out_of_bound ... [0m[32mok[0m
[bounded_vec] Testing push_docs_example ... [0m[32mok[0m
[bounded_vec] Testing test_vec_get_not_declared ... [0m[32mok[0m
[bounded_vec] Testing test_vec_new_good ... [0m[32mok[0m
[bounded_vec] Testing test_vec_get_unchecked ... [0m[32mok[0m
[bounded_vec] Testing test_vec_get_out_of_bound ... [0m[32mok[0m
[bounded_vec] Testing test_vec_any_not_default ... [0m[32mok[0m
[bounded_vec] Testing test_vec_new_bad ... [0m[32mok[0m
[bounded_vec] Testing test_vec_extend_from_bounded_vec_twice_out_of_bound ... [0m[32mok[0m
[bounded_vec] Testing test_vec_push_out_of_bound ... [0m[32mok[0m
[bounded_vec] Testing test_vec_extend_from_bounded_vec_out_of_bound ... [0m[32mok[0m
[bounded_vec] Testing test_vec_any ... [0m[32mok[0m
[bounded_vec] Testing max_len_docs_example ... [0m[32mok[0m
[bounded_vec] Testing storage_docs_example ... [0m[32mok[0m
[bounded_vec] [0m[32m22 tests passed[0m
