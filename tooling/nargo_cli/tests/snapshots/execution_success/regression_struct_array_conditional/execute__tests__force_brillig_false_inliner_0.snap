---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "foo",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "name": "dummy",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _61",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10]",
    "public parameters indices : []",
    "return value indices : [_11]",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "INIT (id: 0, len: 9, witnesses: [_0, _1, _2, _3, _4, _5, _6, _7, _8])",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 4294967293 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(12)), Simple(Witness(13))]",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "EXPR [ (1, _9) (-4294967296, _12) (-1, _13) 4294967293 ]",
    "EXPR [ (-1, _12) 0 ]",
    "EXPR [ (3, _9) (-1, _14) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _15) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 })], outputs: [Simple(Witness(16))]",
    "EXPR [ (1, _10, _16) (1, _17) -1 ]",
    "EXPR [ (1, _10, _17) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(18)), Simple(Witness(19))]",
    "BLACKBOX::RANGE [(_18, 24)] []",
    "BLACKBOX::RANGE [(_19, 8)] []",
    "EXPR [ (1, _9) (-256, _18) (-1, _19) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _17) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 4294967293 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(20)), Simple(Witness(21))]",
    "BLACKBOX::RANGE [(_20, 1)] []",
    "BLACKBOX::RANGE [(_21, 33)] []",
    "EXPR [ (1, _17) (1, _21) (-1, _22) 4294967295 ]",
    "BLACKBOX::RANGE [(_22, 33)] []",
    "EXPR [ (1, _9, _17) (-1, _58) 0 ]",
    "EXPR [ (-4294967296, _17, _20) (-1, _17, _21) (4294967293, _17) (1, _58) 0 ]",
    "EXPR [ (-1, _17, _20) 0 ]",
    "EXPR [ (1, _14, _17) (-1, _17) (-1, _23) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _23) 0 ], value: EXPR [ (1, _24) 0 ]) ",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _17) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19)), (-1, Witness(24))], q_c: 256 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(25)), Simple(Witness(26))]",
    "BLACKBOX::RANGE [(_25, 1)] []",
    "BLACKBOX::RANGE [(_26, 9)] []",
    "EXPR [ (1, _17) (1, _26) (-1, _27) 255 ]",
    "BLACKBOX::RANGE [(_27, 9)] []",
    "EXPR [ (1, _17, _19) (-1, _61) 0 ]",
    "EXPR [ (-1, _17, _24) (-256, _17, _25) (-1, _17, _26) (256, _17) (1, _61) 0 ]",
    "EXPR [ (-1, _17, _25) 0 ]",
    "INIT (id: 1, len: 3, witnesses: [_9, _10, _15])",
    "EXPR [ (1, _9, _17) (-1, _28) 0 ]",
    "MEM (id: 1, read at: EXPR [ (1, _28) 0 ], value: EXPR [ (1, _29) 0 ]) ",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _17) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9)), (1, Witness(29))], q_c: 4294967296 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(30)), Simple(Witness(31))]",
    "BLACKBOX::RANGE [(_30, 1)] []",
    "BLACKBOX::RANGE [(_31, 33)] []",
    "EXPR [ (1, _17) (1, _31) (-1, _32) 4294967295 ]",
    "BLACKBOX::RANGE [(_32, 33)] []",
    "EXPR [ (1, _17, _29) (-4294967296, _17, _30) (-1, _17, _31) (4294967296, _17) (-1, _58) 0 ]",
    "EXPR [ (-1, _17, _30) (1, _17) 0 ]",
    "EXPR [ (-1, _33) 0 ]",
    "INIT (id: 2, len: 15, witnesses: [_2, _33, _33, _0, _1, _5, _33, _33, _3, _4, _8, _33, _33, _6, _7])",
    "EXPR [ (-1, _34) 3 ]",
    "EXPR [ (-1, _35) 4 ]",
    "EXPR [ (-1, _36) 5 ]",
    "EXPR [ (-1, _37) 8 ]",
    "EXPR [ (-1, _38) 9 ]",
    "EXPR [ (-1, _39) 10 ]",
    "EXPR [ (-1, _40) 13 ]",
    "EXPR [ (-1, _41) 14 ]",
    "EXPR [ (-1, _42) 15 ]",
    "INIT (id: 3, len: 10, witnesses: [_33, _34, _35, _36, _37, _38, _39, _40, _41, _42])",
    "EXPR [ (3, _9, _17) (2, _17) (-1, _43) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _43) 0 ], value: EXPR [ (1, _44) 0 ]) ",
    "EXPR [ (1, _17, _44) (-1, _45) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _45) 0 ], value: EXPR [ (1, _46) 0 ]) ",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _17) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19)), (-1, Witness(46))], q_c: 256 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(47)), Simple(Witness(48))]",
    "BLACKBOX::RANGE [(_47, 1)] []",
    "BLACKBOX::RANGE [(_48, 9)] []",
    "EXPR [ (1, _17) (1, _48) (-1, _49) 255 ]",
    "BLACKBOX::RANGE [(_49, 9)] []",
    "EXPR [ (-1, _17, _46) (-256, _17, _47) (-1, _17, _48) (256, _17) (1, _61) 0 ]",
    "EXPR [ (-1, _17, _47) 0 ]",
    "INIT (id: 4, len: 15, witnesses: [_2, _33, _33, _0, _1, _5, _33, _33, _3, _4, _8, _33, _33, _6, _7])",
    "INIT (id: 5, len: 10, witnesses: [_33, _34, _35, _36, _37, _38, _39, _40, _41, _42])",
    "EXPR [ (3, _9, _17) (2, _17) (-1, _50) 0 ]",
    "MEM (id: 5, read at: EXPR [ (1, _50) 0 ], value: EXPR [ (1, _51) 0 ]) ",
    "EXPR [ (1, _17, _51) (-1, _52) 0 ]",
    "MEM (id: 4, read at: EXPR [ (1, _52) 0 ], value: EXPR [ (1, _53) 0 ]) ",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _17) 0 ]",
    "inputs: [Single(Expression { mul_terms: [(-1, Witness(53), Witness(17))], linear_combinations: [(1, Witness(19))], q_c: 256 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(54)), Simple(Witness(55))]",
    "BLACKBOX::RANGE [(_54, 1)] []",
    "BLACKBOX::RANGE [(_55, 9)] []",
    "EXPR [ (1, _17) (1, _55) (-1, _56) 255 ]",
    "BLACKBOX::RANGE [(_56, 9)] []",
    "EXPR [ (-1, _17, _53) (1, _19) (-1, _57) 256 ]",
    "EXPR [ (-256, _17, _54) (-1, _17, _55) (1, _17, _57) 0 ]",
    "EXPR [ (-1, _17, _54) 0 ]",
    "EXPR [ (-1, _1) (1, _11) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pdVBjqMwEAXQu3jNAttVZTtXGY0ikpAWEiIRDSONotx9yuGb6V70xlm9BOd/E2PgYS79af04DtP19mkOvx7mNA/jOHwcx9u5W4bbpEcfz8aUr8dl7ns9ZL6Ma+rezf20mMO0jmNj/nTj+vrR572bXi7drKNtY/rpomrhdRj7/OnZ/E+3P0dddAi7KHucK/K+tRV5ih55iqEizzYiz87V5FlKXtqaPJXFZ/YVeZGyfhJr1k+onL9weu/8id6cv2b9JJV8aGuuX/Dl+gfimjzteX5z/qr9E/b9H6r2fwjxrXxkQj5yrMnTnpea50eyJZ9szfyp3fPu+/y/9Vt3HuZvT1xjvTnYxljaYCUrMMCo6o1p06ZroYUOekiQocAA0efQ53OfXnhvYe7TP+I9JMhQYIARpk3Kfaxa6GDu0xuMCDIUGGCEaZNzX1AtdNBDggwFBhhh2hT0CfoEfYI+QZ+gT3KfbmwJMMK0GVpooYO5L6kEGQoMMELtc7q7YgstdNBDggwl+8zbch6609jjbX5dp/OXl/vy915Gyuv/Pt/O/WWd+7wtX2O6Uf8B",
  "file_map": {
    "50": {
      "source": "struct foo {\n    value: Field,\n    counter: u8,\n    dummy: u8,\n}\nstruct bar {\n    dummy: [u8; 3],\n    value: Field,\n    counter: u8,\n}\nstruct bar_field {\n    dummy: [Field; 3],\n    value: Field,\n    counter: u8,\n}\nfn main(x: [foo; 3], y: u32, z: u32) -> pub u8 {\n    let a = [y, z, x[y].counter as u32];\n    let mut b = [bar { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    let mut c = [bar_field { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    for i in 0..3 {\n        b[i].value = x[i].value;\n        b[i].counter = x[i].counter;\n        b[i].dummy[0] = x[i].dummy;\n        c[i].value = x[i].value;\n        c[i].counter = x[i].counter;\n        c[i].dummy[0] = x[i].dummy as Field;\n    }\n    if z == 0 {\n        // offset\n        assert(y as u8 < x[y].counter);\n        assert(y <= a[y]);\n        // first element is compatible\n        assert(y as u8 < b[y].counter);\n        // fallback\n        assert(y as u8 < c[y].counter);\n    }\n    x[0].counter\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
