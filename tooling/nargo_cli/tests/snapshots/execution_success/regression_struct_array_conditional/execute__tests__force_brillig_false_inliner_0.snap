---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "foo",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "name": "dummy",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VYS3LCMAx1Pi0kEMInmemqwxHsfCDZcY7uyhA2vWZ7r+Iigau4bCIzRTNGQTYPSX5ybHviLPmpvcKzd2oBaN3GxOZbbKHF9mSxjSy2scUWndqa2GKwheCnL/rigd6BlsNERQxYx7McLO4OxVb4YOZiCjqhk5lAAk0JHCaslJuq6rZFp0r1Lot239SyqvebRjWqbupD0ZRl11TNtt23W9mqquzUsW6LI2BNh2OVgCUTRxNJCTfUzynfXMhQXIuYCnehxIx+m/7OXDo8c4CbMpLBVdypkWAmXPloqzKKxV0ebPV7VZ6DXmBCcFXWHS/EpgeNiVP/cKUuu58FUaq54CP9QtyHlD7J51C/U8a5YcuBuh/Bl6BX+sMk81JcX0No04MowcMHmZChxbJkjHHFTBTu7UxqEIONePK+hc34tlEMnLzs+S2hOzlPZKBzJAgWcSb6ha0HrYlT3IXtakKGnlcyxhhzZqK4KOxMuN0+y4EiDOFeFDzGmCeMMeNljJaJET9e3ATQry9nnsX1QkbXVEzGI4Z5Hptc8jmfvX1+fNH84ks9Ah0beAFfnEVE/GHGlyPRl9iSBxp/aPmd98d3n+hbY2+d4RNLH2KuQJv+YhwR0bmBy5hLhfiZG3zrXOXGc0biNPO9Y/IB8fCU9iT64pM+HEtrxuP3TwkigeW/UJAzmWHDfH4DEsrDBTEWAAA=",
  "debug_symbols": "pZLbjoMgEED/ZZ558Mal/spmY1CxISFoKDTZmP77jo663YcmjX06wHCGYTIz9KZN18b6YbxB/TVDG6xz9tq4sdPRjh5P5weDfdvEYAwewVMcrUkH4yPUPjnH4K5dWi/dJu1XRh0wmjEwvkdiwsE6s6we7M/OXquVKje5UvLQ+du+uIjNl1lxwpel2v2Kn/Grw+cfvi+yM/7RP3mqf1KqF/437nRnw7+JgbyAumCQl4SKwKHGMnJBkARFuGA6BkVGyAkFoSRgFongBEGQBMyy1HXXwerWmW1sh+S7pymOP9Me2ed8CmNn+hTMUv8awx/9Ag==",
  "file_map": {
    "50": {
      "source": "struct foo {\n    value: Field,\n    counter: u8,\n    dummy: u8,\n}\nstruct bar {\n    dummy: [u8; 3],\n    value: Field,\n    counter: u8,\n}\nstruct bar_field {\n    dummy: [Field; 3],\n    value: Field,\n    counter: u8,\n}\nfn main(x: [foo; 3], y: u32, z: u32) -> pub u8 {\n    let a = [y, z, x[y].counter as u32];\n    let mut b = [bar { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    let mut c = [bar_field { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    for i in 0..3 {\n        b[i].value = x[i].value;\n        b[i].counter = x[i].counter;\n        b[i].dummy[0] = x[i].dummy;\n        c[i].value = x[i].value;\n        c[i].counter = x[i].counter;\n        c[i].dummy[0] = x[i].dummy as Field;\n    }\n    if z == 0 {\n        // offset\n        assert(y as u8 < x[y].counter);\n        assert(y <= a[y]);\n        // first element is compatible\n        assert(y as u8 < b[y].counter);\n        // fallback\n        assert(y as u8 < c[y].counter);\n    }\n    x[0].counter\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
