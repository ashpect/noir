---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "4105629585450304037": {
        "error_kind": "string",
        "string": "UHashMap after one insert should have a length of 1 element."
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "6665645948190457319": {
        "error_kind": "string",
        "string": "CtHashMaps should be equal."
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "7511829951750337011": {
        "error_kind": "fmtstring",
        "length": 37,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "8082322909743101849": {
        "error_kind": "string",
        "string": "UHashMap after one insert and corresponding removal should be empty."
      },
      "8591465503772373437": {
        "error_kind": "string",
        "string": "UHashMap after clear() should be empty."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "13674703438729013973": {
        "error_kind": "string",
        "string": "UHashMap length is invalid."
      },
      "13848700712118281102": {
        "error_kind": "string",
        "string": "New hashmap should be empty."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14241324264716156348": {
        "error_kind": "string",
        "string": "CtHashMaps should not be equal."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16178254310986598383": {
        "error_kind": "string",
        "string": "New UHashMap should be empty."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16986922238178214607": {
        "error_kind": "string",
        "string": "UHashMap should have retained 2 elements."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_loop<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) {\n    let mut stack: [(u32, u32)] = &[(low, high)];\n    // TODO(https://github.com/noir-lang/noir_sort/issues/22): use 'loop' once it's stabilized\n    for _ in 0..2 * N {\n        if stack.len() == 0 {\n            break;\n        }\n\n        let (new_stack, (new_low, new_high)) = stack.pop_back();\n        stack = new_stack;\n\n        if new_high < new_low + 1 {\n            continue;\n        }\n\n        let pivot_index = partition(arr, new_low, new_high, sortfn);\n        stack = stack.push_back((pivot_index + 1, new_high));\n        if 0 < pivot_index {\n            stack = stack.push_back((new_low, pivot_index - 1));\n        }\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32, Env>(\n    arr: [T; N],\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = arr;\n    if arr.len() > 1 {\n        quicksort_loop(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "9": {
      "source": "use crate::cmp::Eq;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// An unconstrained hash table with open addressing and quadratic probing.\n// Note that \"unconstrained\" here means that almost all operations on this\n// map are unconstrained and importantly are not constrained afterward either.\n// This map is meant to be used in unconstrained or comptime code where this\n// is not an issue.\n//\n// Compared to the constrained HashMap type, UHashMap can grow automatically\n// as needed and is more efficient since it can break out of loops early.\npub struct UHashMap<K, V, B> {\n    _table: [Slot<K, V>],\n\n    // Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the UHashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, B> UHashMap<K, V, B> {\n    // Creates a new instance of UHashMap with specified BuildHasher.\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = &[Slot::default()];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    pub fn with_hasher_and_capacity<H>(_build_hasher: B, capacity: u32) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let mut _table = &[];\n        for _ in 0..capacity {\n            _table = _table.push_back(Slot::default());\n        }\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    // Clears the map, removing all key-value entries.\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = &[Slot::default()];\n        self._len = 0;\n    }\n\n    // Returns true if the map contains a value for the specified key.\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        // Safety: unconstrained context\n        unsafe { self.get(key) }.is_some()\n    }\n\n    // Returns true if the map contains no elements.\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    // Returns a BoundedVec of all valid entries in this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:entries\n    pub fn entries(self) -> [(K, V)] {\n        // docs:end:entries\n        let mut entries = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries = entries.push_back(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    // Returns a BoundedVec containing all the keys within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:keys\n    pub fn keys(self) -> [K] {\n        // docs:end:keys\n        let mut keys = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys = keys.push_back(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    // Returns a BoundedVec containing all the values within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:values\n    pub fn values(self) -> [V] {\n        // docs:end:values\n        let mut values = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values = values.push_back(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    // For each key-value entry applies mutator function.\n    // docs:start:iter_mut\n    pub unconstrained fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = f(entry.0, entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each key applies mutator function.\n    // docs:start:iter_keys_mut\n    pub unconstrained fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = (f(entry.0), entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each value applies mutator function.\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..self._table.len() {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    // Retains only the elements specified by the predicate.\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..self._table.len() {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    // Amount of active key-value entries.\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    // Get the current capacity of the inner table.\n    // docs:start:capacity\n    pub fn capacity(self: Self) -> u32 {\n        // docs:end:capacity\n        self._table.len()\n    }\n\n    // Get the value by key. If it does not exist, returns none().\n    // docs:start:get\n    pub unconstrained fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, value) = slot.key_value_unchecked();\n                if current_key == key {\n                    result = Option::some(value);\n                    break;\n                }\n            }\n        }\n\n        result\n    }\n\n    // Insert key-value entry. In case key was already present, value is overridden.\n    // docs:start:insert\n    pub unconstrained fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.try_resize();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n            let mut insert = false;\n\n            // Either marked as deleted or has unset key-value.\n            if slot.is_available() {\n                insert = true;\n                self._len += 1;\n            } else {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    insert = true;\n                }\n            }\n\n            if insert {\n                slot.set(key, value);\n                self._table[index] = slot;\n                break;\n            }\n        }\n    }\n\n    unconstrained fn try_resize<H>(&mut self)\n    where\n        B: BuildHasher<H>,\n        K: Eq + Hash,\n        H: Hasher,\n    {\n        if self.len() + 1 >= self.capacity() / 2 {\n            let capacity = self.capacity() * 2;\n            let mut new_map = UHashMap::with_hasher_and_capacity(self._build_hasher, capacity);\n\n            for entry in self.entries() {\n                new_map.insert(entry.0, entry.1);\n            }\n            *self = new_map;\n        }\n    }\n\n    // Removes a key-value entry. If key is not present, UHashMap remains unchanged.\n    // docs:start:remove\n    pub unconstrained fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    slot.mark_deleted();\n                    self._table[index] = slot;\n                    self._len -= 1;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Apply UHashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % self._table.len()\n    }\n}\n\n// Equality class on UHashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, B, H> Eq for UHashMap<K, V, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    fn eq(self, other: UHashMap<K, V, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    // Safety: unconstrained context\n                    let other_value = unsafe { other.get(key) };\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, B, H> Default for UHashMap<K, V, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        // docs:end:default\n        UHashMap::with_hasher(B::default())\n    }\n}\n",
      "path": "std/collections/umap.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32, T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::collections::umap::UHashMap;\nuse std::hash::BuildHasherDefault;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> UHashMap::default();\n\nunconstrained fn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nunconstrained fn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"UHashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"UHashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nunconstrained fn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"UHashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nunconstrained fn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"UHashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nunconstrained fn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for entry in input {\n        println(f\"Inserting {entry}\");\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    println(hashmap.len());\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"UHashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nunconstrained fn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"UHashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nunconstrained fn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"CtHashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"CtHashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nunconstrained fn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nunconstrained fn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib cthashmap documentation\nunconstrained fn doc_tests() {\n    // docs:start:default_example\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::default();\n    assert(empty_map.len() == 0);\n    println(empty_map.capacity());\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    let mut map2: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // Safety: testing context\n    let x = unsafe { map.get(12) };\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries[i];\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for key in keys {\n        // Safety: testing context\n        let value = unsafe { map.get(key) }.unwrap_unchecked();\n        println(f\"{key} -> {value}\");\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for value in values {\n        println(f\"Found value {value}\");\n    }\n    // docs:end:values_example\n}\n\nunconstrained fn iter_examples(\n    mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>,\n) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
