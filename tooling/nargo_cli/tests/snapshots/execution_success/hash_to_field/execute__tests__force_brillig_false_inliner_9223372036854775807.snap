---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/+1cB5QcxdGuudPp7pTDnXJEQggEontv73YXBBIgEIggEDnr9vYWgcgCkQVCtn/jH2dsnLFxxsYZG2dsnLFxxsYZG2dsnLFxnH5Mi97ZntPe9lfzet5S7/Wb0dzwqavqq676tMcG9JTtDIgeCZ66HxM9a6d6i16hNdFVuJkEYgnLdkHYOT5sKURgxHZRdN8WxV/loiNcY8PVGa6ucHWHa1y4xodrQrgmhmtSuCaHa0q4poZrWrimh6snXL3hmhGumeGaFa7Z4ZoTrrnhmheu+eFaEK6F0d+/WG+mPbq2RX+x+azd8myM5VmH5dlYy7NOy7Muy7Nuy7NxlmfjLc8mWJ5NtDybZHk22fJsiuXZVMuzaZZn0y3PeizPei3PZliezbQ8m2V5NtvybI7l2VzLs3mWZ/MtzxZYni20PFtkebY4emba4ui6JroKN6s5dPrEQD4/XMgNyz45KHKlcrFf5PvLA0VZlP3F/kqu2Nc3XMwXC6VyqSBKMt83LKv9pb5qBNYGwBquKhOyHYSlfBwDwXoqXh3uWLkoXnKsK1Z+V+xlpxuWMPIou1ywcjWckN3NY4kYv+S4JrEGqnVcleObwypaeC8nNINVtNaQnDh6rEJCPcpJo8UqJNa2nDw6rNwI54ScMhqswohnjpzaONbQbs4vOa1RrMJuz0I5vTEs0cC5KnsawRINndGyd/dY/Q2e93LG7rDyDfcOOXNErHx1FH1IzhoJqzCqniZnJ2MVR9kf5ZwErFJ11L1WzrVjiSb6tpxnwxJNzQByfj2WbHKekAviWJWmZxO5sBarz2HOkYsMrFzVaWaSiwkn+tScE9DTwtQ0tFhdTKhZryLN/e7BuWEF3hbDdd38HsA9LgHsSw/jXDFcYsF1jeESwhZBm5HnkYrANca4fVekZbuwf1UxY7E0uu6pA6LV5lJ6+vTQz9RLcQXazhhEV9W4FLivPQmbXHQxLjFyhszHUspmR8LxqFQx97uMc8MKHNuRSpVlwD3uRX53JBXDvQjdkUqVvYi3I6GLVu13CfEWlXCy0hBZDIId63DLo+veOtC6my2n+g6nXupiSoomZzvSWehJJ+RyoL97M5EFdUDqfSJ93geYV04OtnnIQb3HFbh9sTQZleMVDLnh9hvBnRWec2dfQp2F5b40p9V9cVjC3O9+nBvejwF3JZAMXH6vNAIMwm3Zgt0fHENt6CEByUsBzEUjakK4mVQ5EnDOl3NkMQh2TAHof0zL6eDoaV9SvQJQLyUpAOFmuwKJlfhCSsKRM8eUYHRBIn3uA+aYkzfoBpEn3gYm3EyqvOQz4DcXx/NArH7POZ40rPjweYLGGmCOISLHA57zsECovldK9fOEAg6rRqEVOTdcZMAtAcnA5XfJCDAIl0WhZaFgDyDsoacN7TOSlwcCfU5DoakcHUhozheHyWIQ7JhCWxVdD9LB0WpsFdUrNPUSl0LTgUQrtFWEI+dBTAlGFyTS54MJewhx8QbdIFYTbwMTbiZVXlZnwG8ujq8GYq3xnONJw4pwM4kcVg4h3npB5PgQz3l4KKH6Xk6mqdAOxWHVKLTDODd8GAPuWiAZuPxeawQYhNuyBXs4YRuHNrTPSF4eAfQ5DYWmcnQEoTkvq2QxCHZMoa2Lrkfq4Gg1to7qFZp6iUuh6UCiFdo6wpHzSKYEowsS6fNRhD2EuHiDbhDribeBCTeTKi/rM+A3F8fXA7GO9pzjCsc2rAg3k8hh5RjirRdEjo/xnIfHEqrvVVJVaMfisGoU2nGcGz6OAXcDkAxcfm8wAgzCbdmCPZ6wjUMb2mckL08A+pyGQlM5OoHQnB9KTaFtjK4n6uBoNbaR6hWaeolLoelAohXaRsKR80SmBKMLEunzSYQ9hLh4g24QJxNvAxNuJlVeTs6A31wcPxmIdYrnHE8aVoSbSeSwcirx1gsix6d6zsPTCNX3BnJpKrTTcFg1Cu10zg2fzoB7BpAMXH6fYQQYhNuyBXsmYRuHNrTPSF6eBfQ5DYWmcnQWoTk/wPoN1mY8zo6u5+jgaDV2NtUrNPUSl0LTgUQrtLMJR85zmBKMLkikz+cS9hDi4g26QWwi3gYm3EyqvGzKgN9cHN8ExBr0nONJw4pwM4kcVsrEWy+IHJc95+EQofpepZSmQhvCYdUotArnhisMuMNAMnD5bf7/FSDcli3YKmEbhza0z0hengf0OQ2FpnJ0HqE5XymQxSDYMYW2Obqer4Oj1dhmqldo6iUuhaYDiVZomwlHzvOZEowuSKTPFxD2EOLiDbpBbCHeBibcTKq8bMmA31wc3wLEutBzjicNK8LN5CZgDC8i3npB5Pgiz3l4MaH6Xn4wTYV2MQ6rRqFdwrnhSxhwLwWSgcvvS40Ag3BbtmAvI2zj0Ib2GcnLy4E+p6HQVI4uJzTn80WyGAQ7ptC2RtcrdHC0GttK9QpNvcSl0HQg0QptK+HIeQVTgtEFifT5SsIeQly8QTeIbcTbwISbSZWXbRnwm4vj24BYV3nO8aRhRbiZRA4rVxNvvSByfLXnPLyGUH2vnOpvOV6Dw6pRaNdybvhaBtzrgGTg8vs6I8Ag3JYt2OsJ2zi0oX1G8vIGoM9pKDSVoxsIzflyar/luD263qiDo9XYdqpXaOolLoWmA4lWaNsJR84bmRKMLkikzzcR9hDi4g26Qewg3gYm3EzeFGLsyIDfXBzfAcS62XOOJw0rws0kcljZSbz1gsjxTs95+CxC9b1yJU2F9iwcVo1Cezbnhp/NgPscIBm4/H6OEWAQbssW7P8RtnFoQ/uM5OVzgT6nodBUjp5LaM6Xy2QxCHZMod0SXZ+ng6PV2C1Ur9DUS1wKTQcSrdBuIRw5n8eUYHRBIn3+f8IeQly8QTeIW4m3gQk3kyovt2bAby6O3wrEer7nHE8aVoSbSeSw8gLirRdEjl/gOQ9fSKi+lx9KU6G9EIdVo9BexLnhFzHgvhhIBi6/X2wEGITbsgX7EsI2Dm1on5G8fCnQ5zQUmsrRSwnN+fwgWQyCHVNot0XXl+ngaDV2G9UrNPUSl0LTgUQrtNsIR86XMSUYXZBIn19O2EOIizfoBnE78TYw4WZS5eX2DPjNxfHbgViv8JzjScOKcDOJHFZeSbz1gsjxKz3n4asI1feKqX7b/qtwWDUK7dWcG341A+5rgGTg8vs1RoBBuC1bsK8lbOPQhvYZycvXAX1OQ6GpHL2O0JwvpPZt+3dE19fr4Gg1dgfVKzT1EpdC04FEK7Q7CEfO1zMlGF2QSJ/fQNhDiIs36AZxJ/E2MOFmUuXlzgz4zcXxO4FYb/Sc40nDinAziRxW3kS89YLI8Zs85+GbCdX30lVob8Zh1Si0t3Bu+C0MuG8FkoHL77caAQbhtmzBvo2wjUMb2mckL98O9DkNhaZy9HZCcz49hXZXdH2HDo5WY3dRvUJTL3EpNB1ItEK7i3DkfAdTgtEFifT5nYQ9hLh4g24QdxNvAxNuJlVe7s6A31wcvxuI9S7POZ40rAg3k8hh5d3EWy+IHL/bcx6+h1B9bzDV73J8Dw6rRqG9l3PD72XAfR+QDFx+v88IMAi3ZQv2/YRtHNrQPiN5+QGgz2koNJWjDxCa84OpfZfjPdH1gzo4Wo3dQ/UKTb3EpdB0INEK7R7CkfODTAlGFyTS5w8R9hDi4g26QdxLvA1MuJlUebk3A35zcfxeINaHPed40rAi3Ewih5WPEG+9IHL8Ec95+FFC9b3B/jQV2kdxWDUK7WOcG/4YA+7HgWTg8vvjRoBBuC1bsJ8gbOPQhvYZyctPAn1OQ6GpHH2S0Jwf7COLQbBjCu2+6PopHRytxu6jeoWmXuJSaDqQaIV2H+HI+SmmBKMLEunzpwl7CHHxBt0g7ifeBibcTKq83J8Bv7k4fj8Q6zOeczxpWBFuJpHDymeJt14QOf6s5zz8HKH6XiXVz9A+h8OqUWif59zw5xlwvwAkA5ffXzACDMJt2YL9ImEbhza0z0hefgnocxoKTeXoS4TmfCW1z9AeiK5f1sHRauwBqldo6iUuhaYDiVZoDxCOnF9mSjC6IJE+f4WwhxAXb9AN4kHibWDCzaTKy4MZ8JuL4w8Csb7qOceThhXhZhI5rHyNeOsFkeOvec7DrxOq7w1V01RoX8dh1Si0b3Bu+BsMuN8EkoHL728aAQbhtmzBfouwjUMb2mckL78N9DkNhaZy9G1Cc36oQhaDYMcU2kPR9Ts6OFqNPUT1Ck29xKXQdCDRCu0hwpHzO0wJRhck0ufvEvYQ4uINukE8TLwNTLiZVHl5OAN+c3H8YSDW9zzneNKwItxMIoeV7xNvvSBy/H3PefgDQvU9mepnaD/AYdUotB9ybviHDLg/ApKBy+8fGQEG4bZswf6YsI1DG9pnJC9/AvQ5DYWmcvQTQnNepvYZ2iPR9ac6OFqNqR/EFZp6iUuh6UCiFdojhCPnT4knweiCRPr8M8IeQly8QTeIR4m3gQk3kyovj2bAby6OPwrE+rnnHE8aVoSbSeSw8gvirRdEjn/hOQ9/Sai+V05Vof0Sh1Wj0H7FueFfMeD+GkgGLr9/bQQYhNuyBfsbwjYObWifkbz8LdDnNBSaytFvCc35cmoK7bHo+jsdHK3GHqN6haZe4lJoOpBohfYY4cj5O6YEowsS6fPvCXsIcfEG3SAeJ94GJtxMqrw8ngG/uTj+OBDrD55zPGlYEW4mkcPKH4m3XhA5/qPnPPwTofpesZSmQvsTDqtGof2Zc8N/ZsD9C5AMXH7/xQgwCLdlC/avhG0c2tA+I3n5N6DPaSg0laO/EZrzxQJZDIIdU2hPRNe/6+BoNfYE1Ss09RKXQtOBRCu0JwhHzr8zJRhdkEif/0HYQ4iLN+gG8STxNjDhZlLl5ckM+M3F8SeBWP/0nONJw4pwM4kcVv5FvPWCyPG/POfhvwnV9/KpKrR/47BqFNp/ODf8Hwbc/wLJwOX3f40Ag3BbtmCV06jcGGmB+4zkZQD0OQ2FpgCDAM35fGoKrS3ae3tcjakfxJ+pl7gUmg4kWqG1BThytgc8CUYXJNLnMeBDiIs36AbREfA2MOFmUuWlIwN+c3G8A8jxsZ5zPGlYEW4mkcNKJ3O9IHLcGfjNw64A1fdKuTQVWhcw9+Z+uwPGDXcHeNxxQDJw+T0OPq22bsGOz4hCQ/JyQsYUmsrRBDjnSzXDDRQ7ptAmRnufFFdjEy0KbRKjQtOBRCu0iUByTgp4EowuSKTPkz2fXjVv0A1iiucKTeVlSgb85uL4FCDHp3rO8aRhRbiZRA4r0zxXaCrH0wK/eTgdptAKMk2FNp1JofUEjBvuYVBovZ4rNOV3b0YUWhYKdkZGFBqSlzMzptBUjmbCOT9QJYtBsGMKbVa099lxNTbLotBmMyo0HUi0QpsFJOfsgCfB6IJE+jzH8+lV8wbdIOZ6rtBUXuZmwG8ujs8Fcnye5xxPGlaEm0nksDLfc4Wmcjw/8JuHC2AKrZzqt+0vYFJoCwPGDS9kUGiLPFdoyu9FGVFoWSjYxRlRaEhe7pExhaZytAec8+XUvm1/SbT3pXE1tsSi0JYyKjQdSLRCWwIk59KAJ8HogkT6vKfn06vmDbpBLPNcoam8LMuA31wcXwbk+F6eczxpWBFuJpHDynLPFZrK8fLAbx7uDVNouVQ/Q9ubSaHtEzBueB8GhbbCc4Wm/F6REYWWhYLdNyMKDcnL/TKm0FSO9oNzXqb2GdrKaO/7x9XYSotC259RoelAohXaSiA59w94EowuSKTPwvPpVfMG3SCk5wpN5UVmwG8ujksgx3OeczxpWBFuJpHDSp/nCk3luC/wm4d5mEITlTQVWp5JofUHjBvuZ1BoA54rNOX3QEYUWhYKtpARhYbkZTFjCk3lqIjnfJksBsGOKbRStPcD4mqsZFFoBzAqNB1ItEIrAcl5QMCTYHRBIn0+0PPpVfMG3SBWea7QVF5WZcBvLo6vAnL8IM85njSsCDeTyGHlYM8VmsrxwYHfPFwNU2gDqf6W42omhbYm4Nwwg0I7xHOFpvw+JCMKLQsFe2hGFBqSl4dlTKGpHB0G5/xAar/luDba++FxNbbWotAOZ1RoOpBohbYWSM7DA54EowsS6fMRnk+vmjfoBrHOc4Wm8rIuA35zcXwdkONHes7xpGFFuJlEDitHea7QVI6PCvzm4XqYQpOpfpfjeiaFdnTAuOGjGRTaMZ4rNOX3MRlRaFko2GMzotCQvDwuYwpN5eg4OOdlat/luCHa+/FxNbbBotCOZ1RoOpBohbYBSM7jA54EowsS6fMJnk+vmjfoBrHRc4Wm8rIxA35zcXwjkOMnes7xpGFFuJlEDisnea7QVI5PCvzm4cng4ScthQbcd41COyVg3PApDArtVM8VmvL71IwotCwU7GkZUWhIXp7O3CwROTn9GY7DsM7IaFM6g6kpnRkwbvhMhqZ0ludNSfl91jMFC8M6OyNNCcnLczxvSion5zzDcRjWucDDPc2mdC5TU9oUMG54E0NTGvS8KSm/B58pWBhWOSNNCcnLIc//WVHlZCgljgs3k5rjaFwkx9XeVDNZFOEFET+76OmP0fT9GOO+w7gfa9x3Gvddxn23cT/OuB9v3E8w7ica95OM+8nG/RTjfqpxP824n27c9xj3vcb9DON+pnE/y7ifbdzPMe7nGvfzjPv5xv0C436hcb/IuF8c3VfCPwyHqxqu88K1OVznh+uCcG0J14XhuihcF4frknBdGq7LwnV5uLaG64pwXRmubeG6KlxXh+uacF0bruvCdX24bgjX9nDdGK6bwrUjXDeHa2dsmlgcXddEV+Fm6v9+2YWVqzrxVlZqa6DPBWs4Xk+V5rGq9bUpm8U6z1bnojmszfYzQzSDdX7C+VOqjh7rguSzrDharC0jnYuF0WFdOOIZm6+OBuui3Z3X+caxLt792d/fKNYljfQR0RjWpY31JNEI1mWN9rfC7rEub7xXDu0Oa+to+m5hZKwrRtfDcyNhXTnaeaCQjLVt9LNFIQnrqmbmlKId6+pmsMKf2LCuaQ6rNFCtx7q2SaxwXyKOdV3zWDKfq8W63gWrb1iYWDe4Yclq/mms7a5Y/aWcxrrRHatv+CkweRMEq6rQ5A4QlvpVsJsBWHrW34nTdrt0g7LY2FjzzPxZe3SdGl27o2uH8a56Zw1ojxp/LA++1PidPPh9nVRv5rOOWFyDhPi3G7Hu5tnrrn92MvfXHvs743s03xlD9dYW+/OY2PP2Bt61cVP/bIplf/H/rtuyV/OZ5tZEqrd4XvSvoXYkYHUaPzff74y9y5XD6ZY9BQl/dy/PHnbVVA8PvrDVVK9x3xPz0+TVGtAeNJ7mQAfVW1vsZ/rdrtj+Avz+ZHwvtvNFm+ZMj/GsN2Gv4wwcYE5zGn88D76VM+OM+/Gxn+nc2c60IOHPbbHrSO+O1G9t55DG1Lky96v9+B92If/ykrcBAA==",
  "debug_symbols": "rZjNThtZFITfxWsWfU6d+5dXGY0ihziRJcsgAyONEO8+TZ+vDSyMFDObLhJzS1XiFlXN8+bn7sfT7+/746+7h823v543P077w2H/+/vh7nb7uL87zv/7/HKzWf/5/fG0283/tXn3+XzqfnvaHR83345Ph8PN5p/t4Wn5pof77XHBx+1p/nS62eyOP2ecCX/tD7vXr15u3k5Pl4+GcbaV8+Hy8bRdPq3RC+djmvzMYOMDg19mKKFVfYmobwz9A4MuM7RhY/Uw1C4xfKahtbZqmCm+yNCncQ1Djzgz1OmrDO9+mn/iws8Mza9iGL2uDKP3Swyf3KiYip9vVLt4oz5lcHtj0EWGT2yYqa33ev56XPxx/AnJuI4kvJ1JItr/QFLqtXbijWSKK0lq+zpJeH0jqXYtyfR1klJ1JintWpLSLpL8Pf9re7s/feiNzTTf7ZuNLU9fnlqesTzL8qzLsy3PvjxHnuJwnrY8bnneksCSwZLCksOSxJLFk8XRkCyeLJ4sniyeLJ4sniyeLEoWJYuwkiyaWeYfs0pCTZhZ+gw9YSwQU4Il+PKdoYRkiZKf1YRkiWSJZCnJUpKlJEtJlpIsJbWU1FJaQrKUZKnJUpOleoISIiG11NRSk6X2hLFAmxIsIbW0ZGnJ0pKlJUtLRy21tNTSU0tPLT1Zejrq6aino56OemrpydKTZSTLSJaRjkZqGallpJaRWkayjHQ00pFNE2igg8lkU4AFrGADO5iqzCbQQPhMYIAFrGAD4TP4HD6Hzx1En6PP0efoc/i8g/gVfoVfoU/wCT7BJ/i44cYVN+64ccmNW25cc+OeGxfdAr+B30Afl9247cZ1N+67FfwW9BX0FfQV9HHrreC34Lfit+K3oo+7b1x+4/Yb198qfiv6Kvoa+hr6CIE1/Db8Nvw2/Db0EQUjC0YYjDRYx29HX0dfR19HH5mwjt+O34Hfgd+BPpJhRMPIhhEOG/gd6Bupz6cJNDD5fBIYYAEr2MDOOfjIh5MPNwcFBljACsJnHUy/7hNoIPrIh5MPJx9OPtwbiD5Hn9An9JEPF3759e/8/ncKwIU+8uHkw8mHkw8P/Ab6An00gVMFTj488Bv4Lfgt+KUQnHw4+XDy4eTDC36pBacXnGJwmsHJh1f8VvxW/Fb80g9OPpx8OPlw8uENv7SEUxNOTzhF4eTDG34bfjt+O36pCycfTj6cfDj58I5fSsNpDac2nN5w8uEDvwO/A78Dv7SHkw8nHyIfIh+aHBQYYAErmHyaOph+ZRNooIPwkQ+RD5EPGQuE/hD9IfpD9IfIh1wgc8bZM86goT9EPkQ+RD5EPiT80h+iP0R/iP4Q+ZDwK/wGfgO/9IfIh8iHyIfIh9hKoj9Ef4j+EP0h8iEWk8o63/DLaBL9IfIh8iHyIfIhppPoD9Efoj9Ef4h8iAElFpSYUGJDif4Q+RD5EPkQ+RBLSvSH6A/RH6I/RD7EnhKDSiwqMalEf4h8iHyIfIh8iGEl+kP0h+gP0R8iH2JeiX0V7KtgXwX9EeQjyEeQjyAfwb4K+iPoj7B1VLOqyUewr4J9FeyrYF8F/RHkI8hHkI/wdaU7iD76I+iPoD+CfAT7KthXwb4K9lVonf3wkY8gH0E+gn0V9Ees7xDrS8T6FrG+RpzfI/DLvgr2VdAfsb5MkI8gH0E+gn0V9EfQH0F/BP0R5CPYV8G+CvZVsK+C/gjyEfRH0B9BfwT5CPIR5CPojyAfQT6CfRXsq2BfBfsqyEe85sOm1y/G63vry+sL7mm//XHYPeRfNn89HW/f/aHz8d/79ZP1T6H3p7vb3c+n0+715Xb5bH7d/Q8=",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "50": {
      "source": "fn main(input: Field) -> pub Field {\n    std::hash::hash_to_field(&[input])\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_to_radix",
    "directive_invert",
    "directive_integer_quotient"
  ]
}
