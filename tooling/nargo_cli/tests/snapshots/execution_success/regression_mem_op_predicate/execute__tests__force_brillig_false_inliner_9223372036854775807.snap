---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "idx",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _21",
    "private parameters indices : [_0, _1, _2, _3, _4, _5]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "INIT (id: 0, len: 5, witnesses: [_0, _1, _2, _3, _4])",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [(_6, 222)] []",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "EXPR [ (1, _5) (-4294967296, _6) (-1, _7) 0 ]",
    "EXPR [ (-1, _6) (-1, _8) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_8, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(6))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(9))]",
    "EXPR [ (-1, _6, _9) (5096253676302562286669017222071363378443840053029366383258766538131, _9) (1, _10) -1 ]",
    "EXPR [ (-1, _6, _10) (5096253676302562286669017222071363378443840053029366383258766538131, _10) 0 ]",
    "EXPR [ (1, _7, _10) (1, _10, _10) (268435454, _10) (-1, _11) 0 ]",
    "BLACKBOX::RANGE [(_11, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 4294967293 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(12)), Simple(Witness(13))]",
    "BLACKBOX::RANGE [(_12, 1)] []",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "EXPR [ (1, _7) (-4294967296, _12) (-1, _13) 4294967293 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _12) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 4294967291 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(14)), Simple(Witness(15))]",
    "BLACKBOX::RANGE [(_14, 1)] []",
    "BLACKBOX::RANGE [(_15, 33)] []",
    "EXPR [ (-1, _12) (1, _15) (-1, _16) 4294967296 ]",
    "BLACKBOX::RANGE [(_16, 33)] []",
    "EXPR [ (-1, _5, _12) (4294967296, _12, _14) (1, _12, _15) (1, _5) (-4294967291, _12) (-4294967296, _14) (-1, _15) 4294967291 ]",
    "EXPR [ (1, _12, _14) (-1, _14) 0 ]",
    "EXPR [ (-1, _5, _12) (1, _5) (-1, _17) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _17) 0 ], value: EXPR [ (1, _18) 0 ]) ",
    "INIT (id: 1, len: 5, witnesses: [_0, _1, _2, _3, _4])",
    "EXPR [ (1, _12, _18) (-10, _12) (-1, _19) 10 ]",
    "MEM (id: 1, write EXPR [ (1, _19) 0 ] at: EXPR [ (1, _17) 0 ]) ",
    "EXPR [ (-1, _20) 4 ]",
    "MEM (id: 1, read at: EXPR [ (1, _20) 0 ], value: EXPR [ (1, _21) 0 ]) ",
    "EXPR [ (1, _4, _12) (-1, _12, _21) (1, _21) -111 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "nZLLjoQgEEX/hbULXor2r0wmBhU7JAQNDZNMjP/eJdX0Y9EbN3WE8lyTsjYymSFde+vn5UYuPxsZgnXOXnu3jDraxcPttlekHPsYjIEr8tYHa9XB+EguPjlXkT/tUn7ptmqfGXWALq2I8RMQAmfrzPG0Vy+bfleZFA+Z1eKp16d8dcZXqviqO+M37dOXZ/yu+Jx+fv8XTnq04eOPkQaUiqhc21y7XBlFMARHCIRE1AiMYJDBAS2iy+AUASkwVs4RAiERNaJBKASkSECXISiCIThCICQCUur9GEuwenDmsY1z8uPbcsb/tXTK+q5hGc2UgjnGknswqDs=",
  "file_map": {
    "50": {
      "source": "fn main(mut x: [u32; 5], idx: Field) {\n    // We should not hit out of bounds here as we have a predicate\n    // that should not be hit\n    if idx as u32 < 3 {\n        x[idx] = 10;\n    }\n    assert(x[4] == 111);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
