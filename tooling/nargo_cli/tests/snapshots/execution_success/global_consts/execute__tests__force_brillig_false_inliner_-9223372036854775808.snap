---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "public"
      },
      {
        "name": "d",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "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",
  "debug_symbols": "1d3LaiJBGIbhe+m1i/rqXN7KMAQPbWgQFQ8Dg+Tep+PoRGaEkIXD/+7SdnX5uwjPIqnXc7fs56fXl2Gz2h666bdzt94uZsdhuxmvzp27vHTYzTbvV4fjbH/spjXUSddvluNPxb9NutWw7rtpCm/fJ52++oD/6gPh0QMKQdcnFGK5f2Tyz2Kv1q6LvXfpk8XO5dtip/yx+MHaUsJ1aan3K8epI3LqhJw6I6cuyKkrcuqGnFqOObaYY3vm2EwfxQRS/1nIce3H2P7vYZjwiSmfmPSJaZ93hn7RPFM0zxTNM0XzTNG8JdE8UzTPFM0zRfNM0YIl0QJTtMAULTBFC0zRgiXRAlO0wBQtMEULTNGiJdEiU7TIFC1C/yrHFC1aEi0yRYtM0SJTtMgULVkSLTFFS0zRElO0xBQtWRItMUVLTNESU7TEFC1bEi0zRctM0TJTtMwULVsSLTNFy0zRMlO0zBStWBKtMEUrTNEKU7TCFK1YEq1A/8mfKVphilaYolVLolWmaJUpWmWKVpmiVUuiVaZoFXpujSlaZYrWLInWmKI1pmiNKVpjitYsidaYojWmaA16FJt6FtsSaXLQM9YOesjaQU9ZOyZrcqbOWTvoQWsHPWntoEetHdQ2mbKN2g+hBkSoBRFqQsRWQ4QaEaFWRKgZEWhHRKZCIoKWRARNiQjaEhE0JiJTNRFBcyKC9kQEDYoIWhSRqaSIoE0RQaMiglZFBM2KyFRXRNCwiKBlEUHTIoK2RWQqLiJoXUTQvIigfRFBAyMyVRgRNDEiaGNE0MiIoJURmcqMCNoZETQ0ImhpRNDUiEy1RgSNjQhaGxE0NyJob0SmgiN6bnHk8g6PFWo53t6hVffJR6jxzye4G8b/3j88ef/45P3Tk/fPT9x/vJjvh/V6eH25/5q88eUfs/0wm6/76+XqtFnc3T3+3N3u3J7f7beLfnna9+87Xe6N2/8C",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "52": {
      "source": "pub(crate) mod bar;\n\npub(crate) global MAGIC_NUMBER: u32 = 3;\npub(crate) global TYPE_INFERRED: u32 = 42;\n\npub fn from_foo(x: [Field; bar::N]) {\n    for i in 0..bar::N {\n        assert(x[i] == bar::N as Field);\n    }\n}\n",
      "path": ""
    },
    "53": {
      "source": "mod foo;\nmod baz;\n\nglobal M: u32 = 32;\nglobal L: Field = 10; // Unused globals currently allowed\nglobal N: u32 = 5;\nglobal T_LEN: u32 = 2;\n\n// Globals can reference other globals\nglobal DERIVED: Field = M as Field + L;\n\nstruct Dummy {\n    x: [Field; N],\n    y: [Field; foo::MAGIC_NUMBER],\n}\n\nstruct Test {\n    v: Field,\n}\nglobal VALS: [Test; 1] = [Test { v: 100 }];\nglobal NESTED: [[Test; 1]; 2] = [VALS, VALS];\n\nunconstrained fn calculate_global_value() -> Field {\n    42\n}\n\n// Regression test for https://github.com/noir-lang/noir/issues/4318\nglobal CALCULATED_GLOBAL: Field = calculate_global_value();\n\nfn main(\n    a: [Field; M + N - N],\n    b: [Field; 30 + N / 2],\n    c: pub [Field; foo::MAGIC_NUMBER],\n    d: [Field; foo::bar::N],\n) {\n    let test_struct = Dummy { x: d, y: c };\n\n    for i in 0..foo::MAGIC_NUMBER {\n        assert(c[i] == foo::MAGIC_NUMBER as Field);\n        assert(test_struct.y[i] == foo::MAGIC_NUMBER as Field);\n        assert(test_struct.y[i] != NESTED[1][0].v);\n    }\n\n    assert(N as Field != M as Field);\n\n    let expected: u32 = 42;\n    assert(foo::TYPE_INFERRED == expected);\n\n    let mut y = 5;\n    let mut x = M;\n    for i in 0..N * N {\n        let M: u32 = 10;\n        x = M;\n\n        y = i;\n    }\n    assert(y == 24);\n    assert(x == 10);\n\n    let q = multiplyByM(3);\n    assert(q == 96);\n\n    arrays_neq(a, b);\n\n    let t: [Field; T_LEN] = [N as Field, M as Field];\n    assert(t[1] == 32);\n\n    assert(15 == my_submodule::my_helper());\n\n    let add_submodules_N = my_submodule::N as Field + foo::bar::N as Field;\n    assert(15 == add_submodules_N);\n    let add_from_bar_N = my_submodule::N as Field + foo::bar::from_bar(1);\n    assert(15 == add_from_bar_N);\n    // Example showing an array filled with (my_submodule::N + 2) 0's\n    let sugared = [0; my_submodule::N + 2];\n    assert(sugared[my_submodule::N + 1] == 0);\n\n    let arr: [Field; my_submodule::N] = [N as Field; 10];\n    assert((arr[0] == 5) & (arr[9] == 5));\n\n    foo::from_foo(d);\n    baz::from_baz(c);\n    assert(DERIVED == M as Field + L);\n\n    assert(CALCULATED_GLOBAL == 42);\n}\n\nfn multiplyByM(x: Field) -> Field {\n    x * M as Field\n}\n\nfn arrays_neq(a: [Field; M], b: [Field; M]) {\n    assert(a != b);\n}\n\nmod my_submodule {\n    pub(crate) global N: u32 = 10;\n\n    pub fn my_helper() -> Field {\n        let N: u32 = 15; // Like in Rust, local variables override globals\n        let x = N as Field;\n        x\n    }\n}\n\nstruct Foo {\n    a: Field,\n}\n\nstruct Bar {}\n\nimpl Bar {\n    fn get_a() -> Field {\n        1\n    }\n}\n\n// Regression for #1440\nglobal foo: Foo = Foo { a: Bar::get_a() };\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
