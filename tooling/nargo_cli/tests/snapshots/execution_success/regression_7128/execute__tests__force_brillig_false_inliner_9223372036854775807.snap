---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "in0",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "6485997221020871071": {
        "error_kind": "string",
        "string": "call to assert_max_bit_size"
      },
      "12161114527103510886": {
        "error_kind": "string",
        "string": "completeness violation"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _466",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Array([Witness(2), Witness(3), Witness(4), Witness(5), Witness(6), Witness(7), Witness(8), Witness(9), Witness(10), Witness(11), Witness(12), Witness(13), Witness(14), Witness(15), Witness(16), Witness(17), Witness(18), Witness(19), Witness(20), Witness(21), Witness(22), Witness(23), Witness(24), Witness(25), Witness(26), Witness(27), Witness(28), Witness(29), Witness(30), Witness(31), Witness(32), Witness(33)])]",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_3, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "BLACKBOX::RANGE [(_6, 8)] []",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "BLACKBOX::RANGE [(_9, 8)] []",
    "BLACKBOX::RANGE [(_10, 8)] []",
    "BLACKBOX::RANGE [(_11, 8)] []",
    "BLACKBOX::RANGE [(_12, 8)] []",
    "BLACKBOX::RANGE [(_13, 8)] []",
    "BLACKBOX::RANGE [(_14, 8)] []",
    "BLACKBOX::RANGE [(_15, 8)] []",
    "BLACKBOX::RANGE [(_16, 8)] []",
    "BLACKBOX::RANGE [(_17, 8)] []",
    "BLACKBOX::RANGE [(_18, 8)] []",
    "BLACKBOX::RANGE [(_19, 8)] []",
    "BLACKBOX::RANGE [(_20, 8)] []",
    "BLACKBOX::RANGE [(_21, 8)] []",
    "BLACKBOX::RANGE [(_22, 8)] []",
    "BLACKBOX::RANGE [(_23, 8)] []",
    "BLACKBOX::RANGE [(_24, 8)] []",
    "BLACKBOX::RANGE [(_25, 8)] []",
    "BLACKBOX::RANGE [(_26, 8)] []",
    "BLACKBOX::RANGE [(_27, 8)] []",
    "BLACKBOX::RANGE [(_28, 8)] []",
    "BLACKBOX::RANGE [(_29, 8)] []",
    "BLACKBOX::RANGE [(_30, 8)] []",
    "BLACKBOX::RANGE [(_31, 8)] []",
    "BLACKBOX::RANGE [(_32, 8)] []",
    "BLACKBOX::RANGE [(_33, 8)] []",
    "EXPR [ (1, _0) (-1, _2) (-256, _3) (-65536, _4) (-16777216, _5) (-4294967296, _6) (-1099511627776, _7) (-281474976710656, _8) (-72057594037927936, _9) (-18446744073709551616, _10) (-4722366482869645213696, _11) (-1208925819614629174706176, _12) (-309485009821345068724781056, _13) (-79228162514264337593543950336, _14) (-20282409603651670423947251286016, _15) (-5192296858534827628530496329220096, _16) (-1329227995784915872903807060280344576, _17) (-340282366920938463463374607431768211456, _18) (-87112285931760246646623899502532662132736, _19) (-22300745198530623141535718272648361505980416, _20) (-5708990770823839524233143877797980545530986496, _21) (-1461501637330902918203684832716283019655932542976, _22) (-374144419156711147060143317175368453031918731001856, _23) (-95780971304118053647396689196894323976171195136475136, _24) (-24519928653854221733733552434404946937899825954937634816, _25) (-6277101735386680763835789423207666416102355444464034512896, _26) (-1606938044258990275541962092341162602522202993782792835301376, _27) (-411376139330301510538742295639337626245683966408394965837152256, _28) (-105312291668557186697918027683670432318895095400549111254310977536, _29) (-26959946667150639794667015087019630673637144422540572481103610249216, _30) (-6901746346790563787434755862277025452451108972170386555162524223799296, _31) (-1766847064778384329583297500742918515827483896875618958121606201292619776, _32) (-452312848583266388373324160190187140051835877600158453279131187530910662656, _33) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: -48 })], outputs: [Simple(Witness(34))]",
    "EXPR [ (1, _33, _34) (-48, _34) (1, _35) -1 ]",
    "EXPR [ (1, _33, _35) (-48, _35) 0 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (-1, _35) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 208 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(36)), Simple(Witness(37))]",
    "BLACKBOX::RANGE [(_36, 1)] []",
    "BLACKBOX::RANGE [(_37, 9)] []",
    "EXPR [ (-1, _35) (1, _37) (-1, _38) 256 ]",
    "BLACKBOX::RANGE [(_38, 9)] []",
    "EXPR [ (-1, _33, _35) (256, _35, _36) (1, _35, _37) (1, _33) (-208, _35) (-256, _36) (-1, _37) 208 ]",
    "EXPR [ (1, _35, _36) (-1, _36) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: -100 })], outputs: [Simple(Witness(39))]",
    "EXPR [ (1, _32, _39) (-100, _39) (1, _40) -1 ]",
    "EXPR [ (1, _32, _40) (-100, _40) 0 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (-1, _40, _35) (1, _35) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 156 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(41)), Simple(Witness(42))]",
    "BLACKBOX::RANGE [(_41, 1)] []",
    "BLACKBOX::RANGE [(_42, 9)] []",
    "EXPR [ (-1, _35, _40) (1, _35) (1, _42) (-1, _43) 255 ]",
    "BLACKBOX::RANGE [(_43, 9)] []",
    "EXPR [ (256, _41) (1, _42) (-1, _44) 0 ]",
    "EXPR [ (-1, _35, _40) (1, _35) (-1, _45) 0 ]",
    "EXPR [ (1, _32, _45) (-1, _44, _45) (156, _45) 0 ]",
    "EXPR [ (-1, _41, _45) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: -78 })], outputs: [Simple(Witness(46))]",
    "EXPR [ (1, _31, _46) (-78, _46) (1, _47) -1 ]",
    "EXPR [ (1, _31, _47) (-78, _47) 0 ]",
    "EXPR [ (-1, _35, _45) (1, _35) (-1, _48) 0 ]",
    "EXPR [ (-1, _47) (-1, _49) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _48, _49) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: 178 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(50)), Simple(Witness(51))]",
    "BLACKBOX::RANGE [(_50, 1)] []",
    "BLACKBOX::RANGE [(_51, 9)] []",
    "EXPR [ (1, _48, _49) (1, _51) (-1, _52) 255 ]",
    "BLACKBOX::RANGE [(_52, 9)] []",
    "EXPR [ (256, _50) (1, _51) (-1, _53) 0 ]",
    "EXPR [ (1, _48, _49) (-1, _54) 0 ]",
    "EXPR [ (1, _31, _54) (-1, _53, _54) (178, _54) 0 ]",
    "EXPR [ (-1, _50, _54) 0 ]",
    "EXPR [ (-1, _54) (-1, _55) 1 ]",
    "EXPR [ (1, _35, _45) (-1, _35) (-1, _56) 1 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(30))], q_c: -114 })], outputs: [Simple(Witness(57))]",
    "EXPR [ (1, _30, _57) (-114, _57) (1, _58) -1 ]",
    "EXPR [ (1, _30, _58) (-114, _58) 0 ]",
    "EXPR [ (-1, _55, _56) (-1, _54) (-1, _59) 1 ]",
    "EXPR [ (-1, _58) (-1, _60) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _59, _60) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(30))], q_c: 142 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(61)), Simple(Witness(62))]",
    "BLACKBOX::RANGE [(_61, 1)] []",
    "BLACKBOX::RANGE [(_62, 9)] []",
    "EXPR [ (1, _59, _60) (1, _62) (-1, _63) 255 ]",
    "BLACKBOX::RANGE [(_63, 9)] []",
    "EXPR [ (256, _61) (1, _62) (-1, _64) 0 ]",
    "EXPR [ (1, _59, _60) (-1, _65) 0 ]",
    "EXPR [ (1, _30, _65) (-1, _64, _65) (142, _65) 0 ]",
    "EXPR [ (-1, _61, _65) 0 ]",
    "EXPR [ (-1, _65) (-1, _66) 1 ]",
    "EXPR [ (1, _55, _56) (1, _54) (-1, _67) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: -225 })], outputs: [Simple(Witness(68))]",
    "EXPR [ (1, _29, _68) (-225, _68) (1, _69) -1 ]",
    "EXPR [ (1, _29, _69) (-225, _69) 0 ]",
    "EXPR [ (-1, _66, _67) (-1, _65) (-1, _70) 1 ]",
    "EXPR [ (-1, _69) (-1, _71) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _70, _71) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(72)), Simple(Witness(73))]",
    "BLACKBOX::RANGE [(_72, 1)] []",
    "BLACKBOX::RANGE [(_73, 9)] []",
    "EXPR [ (1, _70, _71) (1, _73) (-1, _74) 255 ]",
    "BLACKBOX::RANGE [(_74, 9)] []",
    "EXPR [ (256, _72) (1, _73) (-1, _75) 0 ]",
    "EXPR [ (1, _70, _71) (-1, _76) 0 ]",
    "EXPR [ (1, _29, _76) (-1, _75, _76) (31, _76) 0 ]",
    "EXPR [ (-1, _72, _76) 0 ]",
    "EXPR [ (-1, _76) (-1, _77) 1 ]",
    "EXPR [ (1, _66, _67) (1, _65) (-1, _78) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: -49 })], outputs: [Simple(Witness(79))]",
    "EXPR [ (1, _28, _79) (-49, _79) (1, _80) -1 ]",
    "EXPR [ (1, _28, _80) (-49, _80) 0 ]",
    "EXPR [ (-1, _77, _78) (-1, _76) (-1, _81) 1 ]",
    "EXPR [ (-1, _80) (-1, _82) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _81, _82) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 207 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(83)), Simple(Witness(84))]",
    "BLACKBOX::RANGE [(_83, 1)] []",
    "BLACKBOX::RANGE [(_84, 9)] []",
    "EXPR [ (1, _81, _82) (1, _84) (-1, _85) 255 ]",
    "BLACKBOX::RANGE [(_85, 9)] []",
    "EXPR [ (256, _83) (1, _84) (-1, _86) 0 ]",
    "EXPR [ (1, _81, _82) (-1, _87) 0 ]",
    "EXPR [ (1, _28, _87) (-1, _86, _87) (207, _87) 0 ]",
    "EXPR [ (-1, _83, _87) 0 ]",
    "EXPR [ (-1, _87) (-1, _88) 1 ]",
    "EXPR [ (1, _77, _78) (1, _76) (-1, _89) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: -160 })], outputs: [Simple(Witness(90))]",
    "EXPR [ (1, _27, _90) (-160, _90) (1, _91) -1 ]",
    "EXPR [ (1, _27, _91) (-160, _91) 0 ]",
    "EXPR [ (-1, _88, _89) (-1, _87) (-1, _92) 1 ]",
    "EXPR [ (-1, _91) (-1, _93) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _92, _93) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 96 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(94)), Simple(Witness(95))]",
    "BLACKBOX::RANGE [(_94, 1)] []",
    "BLACKBOX::RANGE [(_95, 9)] []",
    "EXPR [ (1, _92, _93) (1, _95) (-1, _96) 255 ]",
    "BLACKBOX::RANGE [(_96, 9)] []",
    "EXPR [ (256, _94) (1, _95) (-1, _97) 0 ]",
    "EXPR [ (1, _92, _93) (-1, _98) 0 ]",
    "EXPR [ (1, _27, _98) (-1, _97, _98) (96, _98) 0 ]",
    "EXPR [ (-1, _94, _98) 0 ]",
    "EXPR [ (-1, _98) (-1, _99) 1 ]",
    "EXPR [ (1, _88, _89) (1, _87) (-1, _100) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: -41 })], outputs: [Simple(Witness(101))]",
    "EXPR [ (1, _26, _101) (-41, _101) (1, _102) -1 ]",
    "EXPR [ (1, _26, _102) (-41, _102) 0 ]",
    "EXPR [ (-1, _99, _100) (-1, _98) (-1, _103) 1 ]",
    "EXPR [ (-1, _102) (-1, _104) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _103, _104) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 215 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(105)), Simple(Witness(106))]",
    "BLACKBOX::RANGE [(_105, 1)] []",
    "BLACKBOX::RANGE [(_106, 9)] []",
    "EXPR [ (1, _103, _104) (1, _106) (-1, _107) 255 ]",
    "BLACKBOX::RANGE [(_107, 9)] []",
    "EXPR [ (256, _105) (1, _106) (-1, _108) 0 ]",
    "EXPR [ (1, _103, _104) (-1, _109) 0 ]",
    "EXPR [ (1, _26, _109) (-1, _108, _109) (215, _109) 0 ]",
    "EXPR [ (-1, _105, _109) 0 ]",
    "EXPR [ (-1, _109) (-1, _110) 1 ]",
    "EXPR [ (1, _99, _100) (1, _98) (-1, _111) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: -184 })], outputs: [Simple(Witness(112))]",
    "EXPR [ (1, _25, _112) (-184, _112) (1, _113) -1 ]",
    "EXPR [ (1, _25, _113) (-184, _113) 0 ]",
    "EXPR [ (-1, _110, _111) (-1, _109) (-1, _114) 1 ]",
    "EXPR [ (-1, _113) (-1, _115) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _114, _115) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: 72 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(116)), Simple(Witness(117))]",
    "BLACKBOX::RANGE [(_116, 1)] []",
    "BLACKBOX::RANGE [(_117, 9)] []",
    "EXPR [ (1, _114, _115) (1, _117) (-1, _118) 255 ]",
    "BLACKBOX::RANGE [(_118, 9)] []",
    "EXPR [ (256, _116) (1, _117) (-1, _119) 0 ]",
    "EXPR [ (1, _114, _115) (-1, _120) 0 ]",
    "EXPR [ (1, _25, _120) (-1, _119, _120) (72, _120) 0 ]",
    "EXPR [ (-1, _116, _120) 0 ]",
    "EXPR [ (-1, _120) (-1, _121) 1 ]",
    "EXPR [ (1, _110, _111) (1, _109) (-1, _122) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: -80 })], outputs: [Simple(Witness(123))]",
    "EXPR [ (1, _24, _123) (-80, _123) (1, _124) -1 ]",
    "EXPR [ (1, _24, _124) (-80, _124) 0 ]",
    "EXPR [ (-1, _121, _122) (-1, _120) (-1, _125) 1 ]",
    "EXPR [ (-1, _124) (-1, _126) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _125, _126) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 176 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(127)), Simple(Witness(128))]",
    "BLACKBOX::RANGE [(_127, 1)] []",
    "BLACKBOX::RANGE [(_128, 9)] []",
    "EXPR [ (1, _125, _126) (1, _128) (-1, _129) 255 ]",
    "BLACKBOX::RANGE [(_129, 9)] []",
    "EXPR [ (256, _127) (1, _128) (-1, _130) 0 ]",
    "EXPR [ (1, _125, _126) (-1, _131) 0 ]",
    "EXPR [ (1, _24, _131) (-1, _130, _131) (176, _131) 0 ]",
    "EXPR [ (-1, _127, _131) 0 ]",
    "EXPR [ (-1, _131) (-1, _132) 1 ]",
    "EXPR [ (1, _121, _122) (1, _120) (-1, _133) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: -69 })], outputs: [Simple(Witness(134))]",
    "EXPR [ (1, _23, _134) (-69, _134) (1, _135) -1 ]",
    "EXPR [ (1, _23, _135) (-69, _135) 0 ]",
    "EXPR [ (-1, _132, _133) (-1, _131) (-1, _136) 1 ]",
    "EXPR [ (-1, _135) (-1, _137) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _136, _137) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 187 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(138)), Simple(Witness(139))]",
    "BLACKBOX::RANGE [(_138, 1)] []",
    "BLACKBOX::RANGE [(_139, 9)] []",
    "EXPR [ (1, _136, _137) (1, _139) (-1, _140) 255 ]",
    "BLACKBOX::RANGE [(_140, 9)] []",
    "EXPR [ (256, _138) (1, _139) (-1, _141) 0 ]",
    "EXPR [ (1, _136, _137) (-1, _142) 0 ]",
    "EXPR [ (1, _23, _142) (-1, _141, _142) (187, _142) 0 ]",
    "EXPR [ (-1, _138, _142) 0 ]",
    "EXPR [ (-1, _142) (-1, _143) 1 ]",
    "EXPR [ (1, _132, _133) (1, _131) (-1, _144) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: -182 })], outputs: [Simple(Witness(145))]",
    "EXPR [ (1, _22, _145) (-182, _145) (1, _146) -1 ]",
    "EXPR [ (1, _22, _146) (-182, _146) 0 ]",
    "EXPR [ (-1, _143, _144) (-1, _142) (-1, _147) 1 ]",
    "EXPR [ (-1, _146) (-1, _148) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _147, _148) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 74 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(149)), Simple(Witness(150))]",
    "BLACKBOX::RANGE [(_149, 1)] []",
    "BLACKBOX::RANGE [(_150, 9)] []",
    "EXPR [ (1, _147, _148) (1, _150) (-1, _151) 255 ]",
    "BLACKBOX::RANGE [(_151, 9)] []",
    "EXPR [ (256, _149) (1, _150) (-1, _152) 0 ]",
    "EXPR [ (1, _147, _148) (-1, _153) 0 ]",
    "EXPR [ (1, _22, _153) (-1, _152, _153) (74, _153) 0 ]",
    "EXPR [ (-1, _149, _153) 0 ]",
    "EXPR [ (-1, _153) (-1, _154) 1 ]",
    "EXPR [ (1, _143, _144) (1, _142) (-1, _155) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: -129 })], outputs: [Simple(Witness(156))]",
    "EXPR [ (1, _21, _156) (-129, _156) (1, _157) -1 ]",
    "EXPR [ (1, _21, _157) (-129, _157) 0 ]",
    "EXPR [ (-1, _154, _155) (-1, _153) (-1, _158) 1 ]",
    "EXPR [ (-1, _157) (-1, _159) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _158, _159) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(160)), Simple(Witness(161))]",
    "BLACKBOX::RANGE [(_160, 1)] []",
    "BLACKBOX::RANGE [(_161, 9)] []",
    "EXPR [ (1, _158, _159) (1, _161) (-1, _162) 255 ]",
    "BLACKBOX::RANGE [(_162, 9)] []",
    "EXPR [ (256, _160) (1, _161) (-1, _163) 0 ]",
    "EXPR [ (1, _158, _159) (-1, _164) 0 ]",
    "EXPR [ (1, _21, _164) (-1, _163, _164) (127, _164) 0 ]",
    "EXPR [ (-1, _160, _164) 0 ]",
    "EXPR [ (-1, _164) (-1, _165) 1 ]",
    "EXPR [ (1, _154, _155) (1, _153) (-1, _166) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: -129 })], outputs: [Simple(Witness(167))]",
    "EXPR [ (1, _20, _167) (-129, _167) (1, _168) -1 ]",
    "EXPR [ (1, _20, _168) (-129, _168) 0 ]",
    "EXPR [ (-1, _165, _166) (-1, _164) (-1, _169) 1 ]",
    "EXPR [ (-1, _168) (-1, _170) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _169, _170) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(171)), Simple(Witness(172))]",
    "BLACKBOX::RANGE [(_171, 1)] []",
    "BLACKBOX::RANGE [(_172, 9)] []",
    "EXPR [ (1, _169, _170) (1, _172) (-1, _173) 255 ]",
    "BLACKBOX::RANGE [(_173, 9)] []",
    "EXPR [ (256, _171) (1, _172) (-1, _174) 0 ]",
    "EXPR [ (1, _169, _170) (-1, _175) 0 ]",
    "EXPR [ (1, _20, _175) (-1, _174, _175) (127, _175) 0 ]",
    "EXPR [ (-1, _171, _175) 0 ]",
    "EXPR [ (-1, _175) (-1, _176) 1 ]",
    "EXPR [ (1, _165, _166) (1, _164) (-1, _177) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: -88 })], outputs: [Simple(Witness(178))]",
    "EXPR [ (1, _19, _178) (-88, _178) (1, _179) -1 ]",
    "EXPR [ (1, _19, _179) (-88, _179) 0 ]",
    "EXPR [ (-1, _176, _177) (-1, _175) (-1, _180) 1 ]",
    "EXPR [ (-1, _179) (-1, _181) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _180, _181) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 168 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(182)), Simple(Witness(183))]",
    "BLACKBOX::RANGE [(_182, 1)] []",
    "BLACKBOX::RANGE [(_183, 9)] []",
    "EXPR [ (1, _180, _181) (1, _183) (-1, _184) 255 ]",
    "BLACKBOX::RANGE [(_184, 9)] []",
    "EXPR [ (256, _182) (1, _183) (-1, _185) 0 ]",
    "EXPR [ (1, _180, _181) (-1, _186) 0 ]",
    "EXPR [ (1, _19, _186) (-1, _185, _186) (168, _186) 0 ]",
    "EXPR [ (-1, _182, _186) 0 ]",
    "EXPR [ (-1, _186) (-1, _187) 1 ]",
    "EXPR [ (1, _176, _177) (1, _175) (-1, _188) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: -93 })], outputs: [Simple(Witness(189))]",
    "EXPR [ (1, _18, _189) (-93, _189) (1, _190) -1 ]",
    "EXPR [ (1, _18, _190) (-93, _190) 0 ]",
    "EXPR [ (-1, _187, _188) (-1, _186) (-1, _191) 1 ]",
    "EXPR [ (-1, _190) (-1, _192) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _191, _192) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 163 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(193)), Simple(Witness(194))]",
    "BLACKBOX::RANGE [(_193, 1)] []",
    "BLACKBOX::RANGE [(_194, 9)] []",
    "EXPR [ (1, _191, _192) (1, _194) (-1, _195) 255 ]",
    "BLACKBOX::RANGE [(_195, 9)] []",
    "EXPR [ (256, _193) (1, _194) (-1, _196) 0 ]",
    "EXPR [ (1, _191, _192) (-1, _197) 0 ]",
    "EXPR [ (1, _18, _197) (-1, _196, _197) (163, _197) 0 ]",
    "EXPR [ (-1, _193, _197) 0 ]",
    "EXPR [ (-1, _197) (-1, _198) 1 ]",
    "EXPR [ (1, _187, _188) (1, _186) (-1, _199) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: -40 })], outputs: [Simple(Witness(200))]",
    "EXPR [ (1, _17, _200) (-40, _200) (1, _201) -1 ]",
    "EXPR [ (1, _17, _201) (-40, _201) 0 ]",
    "EXPR [ (-1, _198, _199) (-1, _197) (-1, _202) 1 ]",
    "EXPR [ (-1, _201) (-1, _203) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _202, _203) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: 216 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(204)), Simple(Witness(205))]",
    "BLACKBOX::RANGE [(_204, 1)] []",
    "BLACKBOX::RANGE [(_205, 9)] []",
    "EXPR [ (1, _202, _203) (1, _205) (-1, _206) 255 ]",
    "BLACKBOX::RANGE [(_206, 9)] []",
    "EXPR [ (256, _204) (1, _205) (-1, _207) 0 ]",
    "EXPR [ (1, _202, _203) (-1, _208) 0 ]",
    "EXPR [ (1, _17, _208) (-1, _207, _208) (216, _208) 0 ]",
    "EXPR [ (-1, _204, _208) 0 ]",
    "EXPR [ (-1, _208) (-1, _209) 1 ]",
    "EXPR [ (1, _198, _199) (1, _197) (-1, _210) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: -51 })], outputs: [Simple(Witness(211))]",
    "EXPR [ (1, _16, _211) (-51, _211) (1, _212) -1 ]",
    "EXPR [ (1, _16, _212) (-51, _212) 0 ]",
    "EXPR [ (-1, _209, _210) (-1, _208) (-1, _213) 1 ]",
    "EXPR [ (-1, _212) (-1, _214) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _213, _214) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 205 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(215)), Simple(Witness(216))]",
    "BLACKBOX::RANGE [(_215, 1)] []",
    "BLACKBOX::RANGE [(_216, 9)] []",
    "EXPR [ (1, _213, _214) (1, _216) (-1, _217) 255 ]",
    "BLACKBOX::RANGE [(_217, 9)] []",
    "EXPR [ (256, _215) (1, _216) (-1, _218) 0 ]",
    "EXPR [ (1, _213, _214) (-1, _219) 0 ]",
    "EXPR [ (1, _16, _219) (-1, _218, _219) (205, _219) 0 ]",
    "EXPR [ (-1, _215, _219) 0 ]",
    "EXPR [ (-1, _219) (-1, _220) 1 ]",
    "EXPR [ (1, _209, _210) (1, _208) (-1, _221) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: -232 })], outputs: [Simple(Witness(222))]",
    "EXPR [ (1, _15, _222) (-232, _222) (1, _223) -1 ]",
    "EXPR [ (1, _15, _223) (-232, _223) 0 ]",
    "EXPR [ (-1, _220, _221) (-1, _219) (-1, _224) 1 ]",
    "EXPR [ (-1, _223) (-1, _225) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _224, _225) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 24 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(226)), Simple(Witness(227))]",
    "BLACKBOX::RANGE [(_226, 1)] []",
    "BLACKBOX::RANGE [(_227, 9)] []",
    "EXPR [ (1, _224, _225) (1, _227) (-1, _228) 255 ]",
    "BLACKBOX::RANGE [(_228, 9)] []",
    "EXPR [ (256, _226) (1, _227) (-1, _229) 0 ]",
    "EXPR [ (1, _224, _225) (-1, _230) 0 ]",
    "EXPR [ (1, _15, _230) (-1, _229, _230) (24, _230) 0 ]",
    "EXPR [ (-1, _226, _230) 0 ]",
    "EXPR [ (-1, _230) (-1, _231) 1 ]",
    "EXPR [ (1, _220, _221) (1, _219) (-1, _232) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: -72 })], outputs: [Simple(Witness(233))]",
    "EXPR [ (1, _14, _233) (-72, _233) (1, _234) -1 ]",
    "EXPR [ (1, _14, _234) (-72, _234) 0 ]",
    "EXPR [ (-1, _231, _232) (-1, _230) (-1, _235) 1 ]",
    "EXPR [ (-1, _234) (-1, _236) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _235, _236) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 184 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(237)), Simple(Witness(238))]",
    "BLACKBOX::RANGE [(_237, 1)] []",
    "BLACKBOX::RANGE [(_238, 9)] []",
    "EXPR [ (1, _235, _236) (1, _238) (-1, _239) 255 ]",
    "BLACKBOX::RANGE [(_239, 9)] []",
    "EXPR [ (256, _237) (1, _238) (-1, _240) 0 ]",
    "EXPR [ (1, _235, _236) (-1, _241) 0 ]",
    "EXPR [ (1, _14, _241) (-1, _240, _241) (184, _241) 0 ]",
    "EXPR [ (-1, _237, _241) 0 ]",
    "EXPR [ (-1, _241) (-1, _242) 1 ]",
    "EXPR [ (1, _231, _232) (1, _230) (-1, _243) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: -121 })], outputs: [Simple(Witness(244))]",
    "EXPR [ (1, _13, _244) (-121, _244) (1, _245) -1 ]",
    "EXPR [ (1, _13, _245) (-121, _245) 0 ]",
    "EXPR [ (-1, _242, _243) (-1, _241) (-1, _246) 1 ]",
    "EXPR [ (-1, _245) (-1, _247) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _246, _247) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 135 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(248)), Simple(Witness(249))]",
    "BLACKBOX::RANGE [(_248, 1)] []",
    "BLACKBOX::RANGE [(_249, 9)] []",
    "EXPR [ (1, _246, _247) (1, _249) (-1, _250) 255 ]",
    "BLACKBOX::RANGE [(_250, 9)] []",
    "EXPR [ (256, _248) (1, _249) (-1, _251) 0 ]",
    "EXPR [ (1, _246, _247) (-1, _252) 0 ]",
    "EXPR [ (1, _13, _252) (-1, _251, _252) (135, _252) 0 ]",
    "EXPR [ (-1, _248, _252) 0 ]",
    "EXPR [ (-1, _252) (-1, _253) 1 ]",
    "EXPR [ (1, _242, _243) (1, _241) (-1, _254) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: -185 })], outputs: [Simple(Witness(255))]",
    "EXPR [ (1, _12, _255) (-185, _255) (1, _256) -1 ]",
    "EXPR [ (1, _12, _256) (-185, _256) 0 ]",
    "EXPR [ (-1, _253, _254) (-1, _252) (-1, _257) 1 ]",
    "EXPR [ (-1, _256) (-1, _258) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _257, _258) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 71 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(259)), Simple(Witness(260))]",
    "BLACKBOX::RANGE [(_259, 1)] []",
    "BLACKBOX::RANGE [(_260, 9)] []",
    "EXPR [ (1, _257, _258) (1, _260) (-1, _261) 255 ]",
    "BLACKBOX::RANGE [(_261, 9)] []",
    "EXPR [ (256, _259) (1, _260) (-1, _262) 0 ]",
    "EXPR [ (1, _257, _258) (-1, _263) 0 ]",
    "EXPR [ (1, _12, _263) (-1, _262, _263) (71, _263) 0 ]",
    "EXPR [ (-1, _259, _263) 0 ]",
    "EXPR [ (-1, _263) (-1, _264) 1 ]",
    "EXPR [ (1, _253, _254) (1, _252) (-1, _265) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: -112 })], outputs: [Simple(Witness(266))]",
    "EXPR [ (1, _11, _266) (-112, _266) (1, _267) -1 ]",
    "EXPR [ (1, _11, _267) (-112, _267) 0 ]",
    "EXPR [ (-1, _264, _265) (-1, _263) (-1, _268) 1 ]",
    "EXPR [ (-1, _267) (-1, _269) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _268, _269) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 144 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(270)), Simple(Witness(271))]",
    "BLACKBOX::RANGE [(_270, 1)] []",
    "BLACKBOX::RANGE [(_271, 9)] []",
    "EXPR [ (1, _268, _269) (1, _271) (-1, _272) 255 ]",
    "BLACKBOX::RANGE [(_272, 9)] []",
    "EXPR [ (256, _270) (1, _271) (-1, _273) 0 ]",
    "EXPR [ (1, _268, _269) (-1, _274) 0 ]",
    "EXPR [ (1, _11, _274) (-1, _273, _274) (144, _274) 0 ]",
    "EXPR [ (-1, _270, _274) 0 ]",
    "EXPR [ (-1, _274) (-1, _275) 1 ]",
    "EXPR [ (1, _264, _265) (1, _263) (-1, _276) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: -145 })], outputs: [Simple(Witness(277))]",
    "EXPR [ (1, _10, _277) (-145, _277) (1, _278) -1 ]",
    "EXPR [ (1, _10, _278) (-145, _278) 0 ]",
    "EXPR [ (-1, _275, _276) (-1, _274) (-1, _279) 1 ]",
    "EXPR [ (-1, _278) (-1, _280) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _279, _280) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 111 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(281)), Simple(Witness(282))]",
    "BLACKBOX::RANGE [(_281, 1)] []",
    "BLACKBOX::RANGE [(_282, 9)] []",
    "EXPR [ (1, _279, _280) (1, _282) (-1, _283) 255 ]",
    "BLACKBOX::RANGE [(_283, 9)] []",
    "EXPR [ (256, _281) (1, _282) (-1, _284) 0 ]",
    "EXPR [ (1, _279, _280) (-1, _285) 0 ]",
    "EXPR [ (1, _10, _285) (-1, _284, _285) (111, _285) 0 ]",
    "EXPR [ (-1, _281, _285) 0 ]",
    "EXPR [ (-1, _285) (-1, _286) 1 ]",
    "EXPR [ (1, _275, _276) (1, _274) (-1, _287) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: -67 })], outputs: [Simple(Witness(288))]",
    "EXPR [ (1, _9, _288) (-67, _288) (1, _289) -1 ]",
    "EXPR [ (1, _9, _289) (-67, _289) 0 ]",
    "EXPR [ (-1, _286, _287) (-1, _285) (-1, _290) 1 ]",
    "EXPR [ (-1, _289) (-1, _291) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _290, _291) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 189 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(292)), Simple(Witness(293))]",
    "BLACKBOX::RANGE [(_292, 1)] []",
    "BLACKBOX::RANGE [(_293, 9)] []",
    "EXPR [ (1, _290, _291) (1, _293) (-1, _294) 255 ]",
    "BLACKBOX::RANGE [(_294, 9)] []",
    "EXPR [ (256, _292) (1, _293) (-1, _295) 0 ]",
    "EXPR [ (1, _290, _291) (-1, _296) 0 ]",
    "EXPR [ (1, _9, _296) (-1, _295, _296) (189, _296) 0 ]",
    "EXPR [ (-1, _292, _296) 0 ]",
    "EXPR [ (-1, _296) (-1, _297) 1 ]",
    "EXPR [ (1, _286, _287) (1, _285) (-1, _298) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -225 })], outputs: [Simple(Witness(299))]",
    "EXPR [ (1, _8, _299) (-225, _299) (1, _300) -1 ]",
    "EXPR [ (1, _8, _300) (-225, _300) 0 ]",
    "EXPR [ (-1, _297, _298) (-1, _296) (-1, _301) 1 ]",
    "EXPR [ (-1, _300) (-1, _302) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _301, _302) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(303)), Simple(Witness(304))]",
    "BLACKBOX::RANGE [(_303, 1)] []",
    "BLACKBOX::RANGE [(_304, 9)] []",
    "EXPR [ (1, _301, _302) (1, _304) (-1, _305) 255 ]",
    "BLACKBOX::RANGE [(_305, 9)] []",
    "EXPR [ (256, _303) (1, _304) (-1, _306) 0 ]",
    "EXPR [ (1, _301, _302) (-1, _307) 0 ]",
    "EXPR [ (1, _8, _307) (-1, _306, _307) (31, _307) 0 ]",
    "EXPR [ (-1, _303, _307) 0 ]",
    "EXPR [ (-1, _307) (-1, _308) 1 ]",
    "EXPR [ (1, _297, _298) (1, _296) (-1, _309) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: -245 })], outputs: [Simple(Witness(310))]",
    "EXPR [ (1, _7, _310) (-245, _310) (1, _311) -1 ]",
    "EXPR [ (1, _7, _311) (-245, _311) 0 ]",
    "EXPR [ (-1, _308, _309) (-1, _307) (-1, _312) 1 ]",
    "EXPR [ (-1, _311) (-1, _313) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _312, _313) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 11 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(314)), Simple(Witness(315))]",
    "BLACKBOX::RANGE [(_314, 1)] []",
    "BLACKBOX::RANGE [(_315, 9)] []",
    "EXPR [ (1, _312, _313) (1, _315) (-1, _316) 255 ]",
    "BLACKBOX::RANGE [(_316, 9)] []",
    "EXPR [ (256, _314) (1, _315) (-1, _317) 0 ]",
    "EXPR [ (1, _312, _313) (-1, _318) 0 ]",
    "EXPR [ (1, _7, _318) (-1, _317, _318) (11, _318) 0 ]",
    "EXPR [ (-1, _314, _318) 0 ]",
    "EXPR [ (-1, _318) (-1, _319) 1 ]",
    "EXPR [ (1, _308, _309) (1, _307) (-1, _320) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -147 })], outputs: [Simple(Witness(321))]",
    "EXPR [ (1, _6, _321) (-147, _321) (1, _322) -1 ]",
    "EXPR [ (1, _6, _322) (-147, _322) 0 ]",
    "EXPR [ (-1, _319, _320) (-1, _318) (-1, _323) 1 ]",
    "EXPR [ (-1, _322) (-1, _324) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _323, _324) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 109 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(325)), Simple(Witness(326))]",
    "BLACKBOX::RANGE [(_325, 1)] []",
    "BLACKBOX::RANGE [(_326, 9)] []",
    "EXPR [ (1, _323, _324) (1, _326) (-1, _327) 255 ]",
    "BLACKBOX::RANGE [(_327, 9)] []",
    "EXPR [ (256, _325) (1, _326) (-1, _328) 0 ]",
    "EXPR [ (1, _323, _324) (-1, _329) 0 ]",
    "EXPR [ (1, _6, _329) (-1, _328, _329) (109, _329) 0 ]",
    "EXPR [ (-1, _325, _329) 0 ]",
    "EXPR [ (-1, _329) (-1, _330) 1 ]",
    "EXPR [ (1, _319, _320) (1, _318) (-1, _331) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: -240 })], outputs: [Simple(Witness(332))]",
    "EXPR [ (1, _5, _332) (-240, _332) (1, _333) -1 ]",
    "EXPR [ (1, _5, _333) (-240, _333) 0 ]",
    "EXPR [ (-1, _330, _331) (-1, _329) (-1, _334) 1 ]",
    "EXPR [ (-1, _333) (-1, _335) 1 ]",
    "BRILLIG CALL func 5: PREDICATE = EXPR [ (1, _334, _335) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 16 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(336)), Simple(Witness(337))]",
    "BLACKBOX::RANGE [(_336, 1)] []",
    "BLACKBOX::RANGE [(_337, 9)] []",
    "EXPR [ (1, _334, _335) (1, _337) (-1, _338) 255 ]",
    "BLACKBOX::RANGE [(_338, 9)] []",
    "EXPR [ (256, _336) (1, _337) (-1, _339) 0 ]",
    "EXPR [ (1, _334, _335) (-1, _340) 0 ]",
    "EXPR [ (1, _5, _340) (-1, _339, _340) (16, _340) 0 ]",
    "EXPR [ (-1, _336, _340) 0 ]",
    "EXPR [ (-1, _340) (-1, _341) 1 ]",
    "EXPR [ (1, _330, _331) (1, _329) (-1, _342) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 })], outputs: [Simple(Witness(343))]",
    "EXPR [ (1, _4, _343) (1, _344) -1 ]",
    "EXPR [ (1, _4, _344) 0 ]",
    "EXPR [ (-1, _341, _342) (-1, _340) (-1, _345) 1 ]",
    "EXPR [ (-1, _344) (-1, _346) 1 ]",
    "EXPR [ (-1, _345, _346) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(347))]",
    "EXPR [ (1, _3, _347) (1, _348) -1 ]",
    "EXPR [ (1, _3, _348) 0 ]",
    "EXPR [ (1, _345, _348) (-1, _345) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: -1 })], outputs: [Simple(Witness(349))]",
    "EXPR [ (1, _2, _349) (-1, _349) (1, _350) -1 ]",
    "EXPR [ (1, _2, _350) (-1, _350) 0 ]",
    "EXPR [ (-1, _345, _350) (1, _345) (-1, _351) 0 ]",
    "EXPR [ (1, _2, _351) 0 ]",
    "EXPR [ (-1, _351) (-1, _352) 1 ]",
    "EXPR [ (1, _341, _342) (1, _340) (-1, _353) 0 ]",
    "EXPR [ (1, _352, _353) (1, _351) -1 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(354))]",
    "EXPR [ (1, _0, _354) (1, _355) -1 ]",
    "EXPR [ (1, _0, _355) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _355) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 0 })], outputs: [Simple(Witness(356))]",
    "BLACKBOX::RANGE [(_356, 1)] []",
    "EXPR [ (-53438638232309528389504892708671455232, _355, _356) (53438638232309528389504892708671455232, _356) (-1, _357) 0 ]",
    "BLACKBOX::RANGE [(_357, 128)] []",
    "EXPR [ (-64323764613183177041862057485226039389, _355, _356) (64323764613183177041862057485226039389, _356) (-1, _358) 0 ]",
    "BLACKBOX::RANGE [(_358, 128)] []",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (-1, _355, _356) (1, _356) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(359)), Simple(Witness(360))]",
    "EXPR [ (-1, _355, _356) (1, _356) (-1, _361) 0 ]",
    "EXPR [ (1, _359, _361) (-1, _362) 0 ]",
    "BLACKBOX::RANGE [(_362, 128)] []",
    "EXPR [ (1, _360, _361) (-1, _363) 0 ]",
    "BLACKBOX::RANGE [(_363, 128)] []",
    "EXPR [ (-1, _359, _361) (-1, _458) 0 ]",
    "EXPR [ (-340282366920938463463374607431768211456, _360, _361) (-1, _459) 0 ]",
    "EXPR [ (1, _0, _361) (1, _458) (1, _459) 0 ]",
    "BRILLIG CALL func 2: PREDICATE = EXPR [ (1, _361) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 53438638232309528389504892708671455233 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(359))], q_c: 0 })], outputs: [Simple(Witness(364))]",
    "BLACKBOX::RANGE [(_364, 1)] []",
    "EXPR [ (340282366920938463463374607431768211456, _361, _364) (-1, _460) 0 ]",
    "EXPR [ (53438638232309528389504892708671455232, _361) (-1, _365) (1, _458) (1, _460) 0 ]",
    "BLACKBOX::RANGE [(_365, 128)] []",
    "EXPR [ (64323764613183177041862057485226039389, _361) (-1, _366) (8680525429001239497728366687280168587232520577698044359798894838135247199343, _459) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _460) 0 ]",
    "BLACKBOX::RANGE [(_366, 128)] []",
    "BRILLIG CALL func 2: PREDICATE = EXPR [ (1, _361) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(359))], q_c: 0 })], outputs: [Simple(Witness(367))]",
    "BLACKBOX::RANGE [(_367, 1)] []",
    "EXPR [ (340282366920938463463374607431768211456, _361, _367) (-1, _461) 0 ]",
    "EXPR [ (-1, _361) (-1, _368) (1, _458) (1, _461) 0 ]",
    "BLACKBOX::RANGE [(_368, 128)] []",
    "EXPR [ (-1, _369) (8680525429001239497728366687280168587232520577698044359798894838135247199343, _459) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _461) 0 ]",
    "BLACKBOX::RANGE [(_369, 128)] []",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _355, _356) (-1, _355) (-1, _356) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(370)), Simple(Witness(371))]",
    "EXPR [ (1, _355, _356) (-1, _355) (-1, _356) (-1, _372) 1 ]",
    "EXPR [ (1, _370, _372) (-1, _373) 0 ]",
    "BLACKBOX::RANGE [(_373, 128)] []",
    "EXPR [ (1, _371, _372) (-1, _374) 0 ]",
    "BLACKBOX::RANGE [(_374, 128)] []",
    "EXPR [ (-1, _370, _372) (-1, _463) 0 ]",
    "EXPR [ (-340282366920938463463374607431768211456, _371, _372) (-1, _464) 0 ]",
    "EXPR [ (1, _0, _372) (1, _463) (1, _464) 0 ]",
    "BRILLIG CALL func 2: PREDICATE = EXPR [ (1, _372) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 53438638232309528389504892708671455233 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(370))], q_c: 0 })], outputs: [Simple(Witness(375))]",
    "BLACKBOX::RANGE [(_375, 1)] []",
    "EXPR [ (340282366920938463463374607431768211456, _372, _375) (-1, _465) 0 ]",
    "EXPR [ (53438638232309528389504892708671455232, _372) (-1, _376) (1, _463) (1, _465) 0 ]",
    "BLACKBOX::RANGE [(_376, 128)] []",
    "EXPR [ (64323764613183177041862057485226039389, _372) (-1, _377) (8680525429001239497728366687280168587232520577698044359798894838135247199343, _464) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _465) 0 ]",
    "BLACKBOX::RANGE [(_377, 128)] []",
    "EXPR [ (53438638232309528389504892708671455232, _372) (-1, _378) 0 ]",
    "BLACKBOX::RANGE [(_378, 128)] []",
    "EXPR [ (64323764613183177041862057485226039389, _372) (-1, _379) 0 ]",
    "BLACKBOX::RANGE [(_379, 128)] []",
    "BRILLIG CALL func 2: PREDICATE = EXPR [ (1, _372) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(370))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 0 })], outputs: [Simple(Witness(380))]",
    "BLACKBOX::RANGE [(_380, 1)] []",
    "EXPR [ (340282366920938463463374607431768211456, _372, _380) (-1, _466) 0 ]",
    "EXPR [ (-1, _372) (-1, _381) (-1, _463) (1, _466) 0 ]",
    "BLACKBOX::RANGE [(_381, 128)] []",
    "EXPR [ (-1, _382) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _464) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _466) 0 ]",
    "BLACKBOX::RANGE [(_382, 128)] []",
    "EXPR [ (-1, _0) (1, _372) 0 ]",
    "EXPR [ (1, _1) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 19 }, BinaryFieldOp { destination: Relative(3), op: LessThan, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 24 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Mov { destination: Direct(32838), source: Relative(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Stop { return_data: HeapVector { pointer: Relative(3), size: Relative(4) } }, Return, Call { location: 24 }, Cast { destination: Relative(3), source: Relative(1), bit_size: Integer(U128) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Field }, BinaryFieldOp { destination: Relative(3), op: Sub, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(1), bit_size: Field, value: 8680525429001239497728366687280168587232520577698044359798894838135247199343 }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(3), rhs: Relative(1) }, Mov { destination: Relative(1), source: Relative(2) }, Mov { destination: Relative(2), source: Relative(4) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 29 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 2",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 27 }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 22 }, Jump { location: 19 }, BinaryFieldOp { destination: Relative(4), op: LessThan, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(3), source: Relative(4) }, Jump { location: 25 }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, Mov { destination: Relative(3), source: Relative(1) }, Jump { location: 25 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 32 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 3",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]",
    "unconstrained func 4",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 5",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "tZvbbty4EkX/pZ/9oLrwll8ZBIGTeAYGDCdw7AEOgvz7EVu16AwOJOtI4xdz+6LdxaIWq6hu/7x8vfv88ten+8c/v/24fPjj5+Xz0/3Dw/1fnx6+fbl9vv/2OP/052XqXyRfPsivm4vwTZ51WYZ6+VDmoV0+1JuLzn9e5z9U/lCXX/mv+Yf4fnp+urvrf/DbC80v//326e7x+fLh8eXh4eby9+3Dy/WPfny/fbyOz7dP82+nm8vd49d5nA3/vH+46+rXzevV0/qlIpNrXD7rnIaF1L0etVk41NZery97r2+W4/qWytr19s5zmHComtdiSOvXZ/e4Pic7cn0Vrq/10PXcBGWyA2ugzhpolnF9+ud91NavTzoCSNry2grIRgi5KGuQi9c1i60gshaCyJbOOrgdcih1OLRDDqlwL83y0CzqNBzqlA/g4JlJeNG120HKukFJhRu6pOar90NdtzCrLSzM2urGIBuJsGksp01mhywkkQqT0o5ZtGGhshpFv/tX8cwqg8/1iejGLqnTBKE66bqFb9xXhY0+y7S2pJsx6FhSNV3d5zRvbPZJsJDkumpRzk5jM4YsI4bqqzG0szFs3hGpjDsir96XJhvTaDam0bwesdh5U5mdzMR2DK+1a9rIRHrPGCSP1ZD1O+INCzltMfaqwxb7CPWtltJGNsWaHLJwGQ2d679gkY5Z6Nhq3P2gRR0WqZ2eyFGL8jqRWs9apOmYxb6d28/umtsx7Nq5k7znzl36VrQgVvJ6s2+nEdu02IfYfot0zGIXYm9Y7EFs90SOWuxCbK/FBmKbFvsQy3ry9t6OYRdi+Wyfudlx6zhCzUVsdUFzPt1x53K6v9qy2Nlf5bN75nYMu/qrIu8Zw77+6g0LOW2xq7/atNjXX5V8evPftNi3+e+3SMcsdm3+b1js2fx3T+Soxa7Nf6/FxuZfzp+M69lzUDl/Mq5nT+fbO/euk3Ftpylt57vddnbXbOe73WbvuRr7ut2WTm94mxb7dqtti1271RsWe3ar3RM5arFrq9m02Hdzy3S20dwOYtfdLdPZTnPaetsjj3c9ytpz8q3rfbxZ8Nti/h/Xv75VUO0f13+cv7v9cv/0P+9cilzfs+yDLoMtgy9DWoa8DGUZ6jK0uByb8JEwknCSsJLwkjCTcJOwk/DT8FPiCj8NPw0/DT8NPw0/DT8NPws/Cz9jouFn3W9eeEsx5hi735xQqzG2ZfQpRolRY7QYw8/Dz8PPw8/Dz8MvhV8KvxR+KfySx5hiDL9UYqwxtmXMU4zhl8Mvh18Ovxx+OccY8eWIL0d8JeIr4Vd08S8WY8y3xHxLxFfCr4RfCb8afjX8asRXI74a8dWIr0Z8NfxqzLfGfFvMt0mMEV8LvxZ+Lfxa+LXwaxFfi/hkmhCCUIQhYtIyJURGFERF4Cw4C86Cs+AsjkiIjCiIisBZIwmiglCEIYhZcVacFWfFWXE2YjZiNmI2YjZiNpyBSIxsGNmwWDdxYoYkASWBJXGcHWcnZngSgBKIEpASmJJENhLZSGQjsYKAJQnnhHPCOeMMXQJeAl8CYAJhAmICY5LJRiYbhWwUVhDQpOBccC44F5yhTcBN4E0ATiBOQE5gTirZqGSjko3KCgKeVJwbzg3nhjP0CfgJ/AkACgQKCAoM6hTZ0EkQijCEIxJXZURBVATOMKgwqDCoMKgwqDCoEtlQKYiKiBVUGFTFWXFWnBVnGFQYVBhUGFQYVBhUGFQjG0Y2KGNKHVMYVCqZUsqUWqYUM4VBhUGFQYVBhUGFQYVBdbLhZCORjcQKwqBS2ZTSptQ2TTjDoMKgwqDCoMKgwqDCoGaykclGJhuZFYRBpdIppU6pdVpwhkGFQYVBhUGFQYVBhUGtZKOSjUo2KisIg0rlU0qfUvu04gyDCoMKgwqDCoMKgwqD2shGIxuNbLRYQYNBow4addCogzY5IiEygv4JBg0GDQYNBk0iGyaGoC0T+jIYNOqgUQeNOmiKMwwaDBoMGgwaDBoMGgyaRjZMyYaRDRMEMVMHjTpo1EEznEc3OdpJGDQYNBg0GDQYNJpKo6s02krzgiBm6qBRB406aDSXBoMGgwaDBoMGgwaDBoNGk2mZbGSykVlBGDTqoFEHjTpoNJsGgwaDBoMGgwaDBoMGg1ZG0042CtkorCAMGnXQqINGHTSaT4NBg0Gr4zxAzDBoMGgwaDSh1shGIxuNFYRBow5aG0eNcdbgsAGDDoMOgw6DDoMOgw6DTi/qU2TDZUIIQhE4UwedOuj0og6DDoMOgw6DruOERMww6PSirpySlGOSFgQxUwedOujUQbdx+MIZBh0GHQYdBh0GfZzp6EXdyYaTDTcEMVMHnTro42w3Dncw6DDoMOgw6DDoMOgw6PSizinPOeY55zyHQacOOnXQqYNOL+ow6DDoMOgw6DDoMOgw6PSizqnPOfY55z4v46CLM3XQqYNOL+ow6DDoMOgw6DDoMOh1nKHJBqdA5xjonAMdBp066DDoMOgw6DDo1EGnDibqYILBBIMJBhMMpiuDuYv+2e6pi4KoiNbfMuon/gkxO/engakzuAjrn1LswhGpv3/Zxexs/bU6g4uoiNm5f346dQYXMTtb60IRhpidvb96Z3ARuT8u6qIgKqL1p1r9qcSEkP7EqgtFzM65J6ozuIiE6B+JT10URO2fU+6i9Y8p9+ccE0IQs3Ppr9UZXIT3j5B2kRAZMTuX0kVF9I/c9yR0BhchiNm59lfvDC5idm79JTqDi5idW59XZ3ARs3O7Xt5CXBmc+gyvEC5Kh+q3x9SDu3K4qH6DXB+0/n37dH/7+eHux/wsrj+te3n8wqO5+dvn/3znN/zbwfenb1/uvr483fXHeL/978H89Y/5Eaz6x/EfCP1H6jfaPo7/Nbj+qNyYfvzVHwj+Fw==",
  "file_map": {
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "fn main(in0: Field) -> pub Field {\n    let mut out0: Field = 0;\n    let tmp1: Field = in0;\n\n    if (out0 == out0) // <== changing out0 to in0 or removing\n    {\n        //     the comparison changes the result\n        let in0_as_bytes: [u8; 32] = in0.to_be_bytes();\n        let mut result: [u8; 32] = [0; 32];\n        for i in 0..32 {\n            result[i] = in0_as_bytes[i];\n        }\n    }\n\n    let mut tmp2: Field = 0; // <== moving this to the top of main,\n    if (0.lt(in0)) //     changes the result\n    {\n        tmp2 = 1;\n    }\n\n    out0 = (tmp2 - tmp1);\n\n    assert(out0 == 0, \"completeness violation\");\n\n    out0\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "field_less_than",
    "decompose_hint",
    "lte_hint",
    "directive_to_radix",
    "directive_invert",
    "directive_integer_quotient"
  ]
}
