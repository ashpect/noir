---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/81WS47DIAwlofnuRpPu5wgQoIFdrzJRyf2PMEXFkkWZxQgz7ZMiIzt6PDs2pGEPzPfnI66b+8OjDfhKfE3G12Z8POM7Rd8J7ZUCfNdoRRkkIZfAeruagrsKvD3iUuKitd9WL5X8FqvbrRHa7BcrrTTW3FarlLfabm53m3BSKy8P49QRyWrl3aMCE/GKvzRbaV0oa4z1DjUFB/KWmHcgbIyxcuNS1HCswDvS1fBf8xZlkO+ed5iVPjMzogyypeNaKQ4ifzzwqtu6TPdtw3qnmoInRneAgviJUOPM3v/mnxndoEINZ0Z7kPzWQ4UD5il1wm92QJdoDj3KUTwHyG1K7BnFOeG3B/6lDr8Y2DPOaL0kebYodiXSAHw82o49o01i8O6Y6Gvo9clUC8/sBfiMdkE+qOcPgdZGh08OAAA=",
  "debug_symbols": "nZLBboQgEIbfZc4eUEDQV2kag4obEoKGhU0as+/eEaXdPTRpuMwPDN8w/JkdZj3G22Dcst6h/9hh9MZacxvsOqlgVoen+7OCvB2C1xqP4CWP1Ka8dgF6F62t4KFsTJfum3JJg/KYJRVoN6NiwcVYfaye1S9N/kYbRi+4Yd0Pzv/Ptyzzoi7gKakvntakhG+7zAtZwDOR/89kyfucZPM5aUt4KjPPaQkvmszLd/4Td2oy/m3igEOPhrcpihQlWldBl2JNTqlPadAVFIoFUdgp/BQscfj9UN6o0eprnJfoppfpDl9bzuT53/w66Tl6ffSVctjpNw==",
  "file_map": {
    "50": {
      "source": "fn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn test3(x: u8) {\n    if x == 0 {\n        must_be_zero(x);\n    }\n}\n\nfn test4() -> [u32; 4] {\n    let b: [u32; 4] = [1, 2, 3, 4];\n    b\n}\n\nfn main(a: u32, mut c: [u32; 4]) {\n    test3(1);\n\n    if a == 0 {\n        c = test4();\n    } else {\n        assert(c[1] != 2);\n    }\n    if false {\n        c[1] = 5;\n    }\n    assert(c[1] == 2);\n\n    test5(4);\n    // Test case for function synchronisation\n    let mut c_sync = 0;\n    if a == 42 {\n        c_sync = foo2();\n    } else {\n        c_sync = foo2() + foo2();\n    }\n    assert(c_sync == 6);\n}\n\nfn test5(a: u32) {\n    if a > 1 {\n        let q = a / 2;\n        assert(q == 2);\n    }\n}\n\nfn foo2() -> Field {\n    3\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
