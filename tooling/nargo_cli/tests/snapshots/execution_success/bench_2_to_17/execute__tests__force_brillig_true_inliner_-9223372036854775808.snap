---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjRbts4EEX/Rc9+EIccDie/UgSBkyiFAcMJXHuBReB/3xkNr9IskKJlX3yPovCIooak7PfpeXm8fn84nF5ef0x3396nx/PheDx8fzi+Pu0vh9eT/fV9mv0j83RHuynXCIloEbpGmSNSBEXkiDLdZQuOqBES0dZgOyoWdsQWukY1Z7VIERSRI0oER9QIiWgRuoaERcIiYZGwSFgkLBIWCYuERcLSwtLC0swiFjmiRHBEjZCIFqFraLRTO9csWoSukea5Z+pJPXPP0pN71p7S0zxqmeaeqSf1zD1LT+5Ze0rPFknmSbODNUzJoQAYYG0TOQigAbRDngEJQIAMKAAGQOgllbIDATKgABhQAQJoAO3AMwBmdnNxyIACYEAFCKABtIMXbEACwFxhrjB77SV28EtUhwoQQANoB6/DJA4u9Mfu1RfAgAoQQANoB3WPP2VNAAJkQAEwoAJ8DfDa8BoO0ADyMg5IAAJkQAH4kpIcBNAA2sHrOSABCJABBcAAmBPMXtdEDtrBKzwgAQiQAQXQh5eoAgTQh5dyTDXyuqbsUAAMqADvV3FoAO2wLqYrJAABMqAAGFABMBeYC8wMM8PMMHvtEzuUDl4+ZEVHXiwkDglAgAwoAAZUgAAaQKP2sxdLQAIQIAMKgAEVIIAGgDnBnGBOMCeYE8xrsVQH76o9ybyWxgr9ljMRIAMKwG9ZHSpAAL6/zQ7awZfDAJgzzBnmDHNmQAUIoAG0Q5kBMK/VIrfbbsKm/nA5L4vv6T/t8rb3v+3Py+ky3Z2ux+Nu+md/vK7/9ONtf1rzsj/bWev1cnq2NOHL4bg43XYfreevm2rtbW1B3lrz5+bp6+aZqbcvqX60l9+9vK3IuH7Vr67/i/a20nAX2BIzD/TADGUz1DJkUNyErVw6YqD8YSg0YqgNRUBV84hBEkqBJA+NJNWtDyRDBltcYLD1YagPTTfDPDKSTBDw0CiwSm9fE4/MiJkwpexNcsiQMp5D+jSr/8BQtz7Y68uIIW/DYDjUB6btLrjIkKHqZmg6dBfzZrAdY8hQymbgobuo26xKVYb6IIJZZe+rI3PC3kq3cVAaMUhBQUkZ2Se0YJlXHhkDnVGOSkPX3yaECv9d///X/t6O9k+H86ev9zc3nQ/7x+PSD1+up6efzl7+fcMZ/Dzwdn59Wp6v58VNH78R2Mc3Yt1Rm+/9y6gd8rxj9oPk51qyc/n+5l35Dw==",
  "file_map": {
    "50": {
      "source": "global len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
