---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZfdbtswDIXfxde5EClRP3uVoijS1i0CBGmRJgOGIu8+MtRx2gEOOne78fn8wxOJIuX4fXgc74/Pd5vd08vb8OPmfbjfb7bbzfPd9uVhfdi87PTq+xDsEPWYVkMkF3aJLslFXLJLcaku7SzJXZK7JHURleiSXMQluxSX6tLOIsGFXNxF3EXcRdxF1CWqFJfq0s6Sgwu5sEt0SS7i4i7ZXbK7ZHcp+khW0YtVRS+21VCDC7mwiz5JpKqPEqs21xa6UlfuGrumrtI1dy1du18zPx0RhQAgAAMiIAEEkAHmGwwqoHWgADDnZMAAcxaDBBBABhRA81QQm2E2iIAEEEAG9AkTV0BPIVl1UjEgAAPMuRokPCyADIBzhHOEcwoAAjAgAuCcYGiFSrrmZKXqQAANZ5u7FayDhrNFWdE6ZEAB6MDYVsfKlS3hVrAOEZAAAsiAAjAfWwIr3zOUACAAAyIgAczZ1qJkQAFUQOtgXeBAAAZYuC2KNQFbWqwLHAjAgAhIAAFkQAFUQHdma4cYDAjAgAhIAAFkQAFY35NB62Dt4EAABkRAAvRFYcqAAqgdrB3YfsvawfLD1g6RDQqgAloHK36HnjqODIgA84kGAsgAc7ZfjxUPI3UpAOCc4JzgnBJAABlQAHCWs+HptBrwhrk77MfRXjAfXjn6Inpd78fdYfixO263q+Hnens8P/T2ut6d9bDe611N1bh7VFXDp812NDqtLtFhPrTlHkupTtHyOZzmw6Nwj0+UL/HlUzzPx7PWeTfQVW9zDnHeQSyhZwOJYUl8Kz0+kyyZAcfLDBIvcSiEReAyP4fyPx10i0QR6SZZlziUEuFQ2mwe6EotloRiKikvMWhJukGTusRA/yFgCPpHQJakoQXUo+7cs2m4NoZM00q02Za8loWAim68LI0ZSWhFvrkOZVFPxYBa0u6iRV1Z2+QQ5rvy+7Vw1YLi1FWf9te/sZgWg6guG0WctjjFZaMQniYiqSyzyFNjSG3LJnLprcjzEynf3GKuGXxpi7lm8C/KKqY05UHKoml8ZY+4avCVPeKLifzD4FbP1g+b/aev75M57Tfr++3YT5+Ou4cPdw+/XnEHX++v+5eH8fG4H83p8gmvhxvW4XONt/ZVZ6cSVyzVTslOa9G77fZkg/kN",
  "file_map": {
    "50": {
      "source": "global len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
