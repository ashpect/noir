---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VavY7rRBQex3YSx3HihY6KR7A3zs3SrcTeRUKi4Q18c+9K0CLRIbmk4TGQaEBCouYRaHgLhESBaKjYWebgz59PvFntDIKRVjP2OXO+M+dvZpyNTN8i1yf0bBSea9dXz2u1R1mVquhUE57cDTL3PAN67HGxGeH6lH9VNVeZsj6P+u8yJzOkfURmAPnVwsn5oOvl81psK9wzxpDMWd7/rU0/vnDjjOaE8G1A21dvK/rPYG22vd/5x653l43Ivwkgv3Jxa9vLMPIrkX8bRn6du1j7xskrzDBeBVN8ZcdYxD36ah8RnjHDfDWEvzJBc7qOCE/0YfvMyD5pGPs0EclHfVLFPuLLuUITWVK3UpCF/CmsEflxLPPx3buuLxWZEY3nZrwefCf2te/ecWOuibZdu756ZivM2O+cAyF8fN+ac3NA8FcmXE5WkANazCWKj7SYk7k+Y+HfksX+tu3a9U8y5H3+8rtC0YlxMd88+vXsWiv4K8VGIeJsQfqc8pnYbqnoWio0jo2lgrNUcP5PsiRGCzOO2ehELzj8jnGm9pfEIw7WsTnhzD3ioCw5uwnOwgOO5O+SeK5dXz2zlWZcH5aEnYXBrsVOMzO2obXrh4Br/1buGc8YOFfO/inxf2p6mR+58Zbmsw2kLtmGsTRT7JQS/8euz0gPz7WuegvkGsIKfBdrC8LDJrQcsLmmrIHGdaAAGufuBmjoL24xPaMtrN++A7nMJ02LkZRosbIOoa2UdWh1cKp2xUTDfXNFNLQH5izXVu3uIfdCbc1cl2VeqvDyPiTP2pq0HBL+T1wf+puClkOClYNOEsvGTN/dhH+t8OcKhhYra6LhvDnRMI+4fklsJ4pszfbC/5nrxfaYc6Ftv6E1rGENbEfbbrrhGoT/K9dbe31uhjbT6pJmT85nrS5tzXRdihyP6BiTLG0Nwv+F662ffnVjmRd3PYasR3I+AZrPO6XV4zfQA3V90L8brrsEWqzwc85cKPwl8MjaS+Ln/MFnlIU2vyVdxYZzhZ/PHsj/peutbdJoqB/W+C3pruXkU2v8BnT+2o0zM45xjzFw5P0bm7Z/876PecL7/hZovO9jHDx13xdbPHXf91EnFoT3X8lb8YNtnLeYo7HCz3n7WJ6/7P7uSzP2Jcc35syGaOfkjG23hIfxIn7AnJmqGTNFLt9bcC7eW0L69XBVVRKzElOyv3BLgI7837pnrJ3SJ8/Q8+7Q1ne79q7dt69fN8eW93ljhmcs7XcD/OYg8WNt+z3IQr/j3opzb7qejvw/mV7mD268NeMYjIiGtZnPcPyNDWl4f+d6gWd1kR/67sj7Hp6vEBN/b+aaiOcw3hd/dL1d9zLq56BMA5j4bup7akb2ycLYp+E7rGAg9joM9tnfVAV/ZYLu+f98U9XuNNo3VbFPEcg3os9G0SdX9LlwvOwz1E9k4R4jsSVxiLbn3yJwL8iJhr7jb8uIJzXCztfqDcpBWVrt47nsK61Wyv7Gv8H97Ho7/xc31moe10qseVwrOW+RhvWHf2fUYlD7ri38hcKPMcDnOsyh4gxZiwlsLT6LCWzUC+cyNusp87QzJn7LtS0Bms+apZ0xB/sD4J7yo5a7U7bU/FgSP9pOy2POx3PzmGsDximeBSVf+FyD+YjnGt9nseP+xatjs2+rN7V9vHzsLCbn9nnX0zGebFu4ZzkzML/IS4n/d1jvH6a3ywNvN8azfEl0mi860T/IUN4l3fBd1o35427ML9irbqyj0HKgYazbtnbPaC+UJXqkxB85AeKTJcyR+aWCvyT8gd7KO4x5lhUr7/D/KP4Uea7Htfs+gzxgknx8x7pJ7OTGf17dp9Th2B7q+r2mftPU+8fyyjd+e9hdHS+b4+HVftfuXjx6x/oLEeQWlkUrAAA=",
  "debug_symbols": "1ZzdTuMwEIXfJde9sMd/cV9ltUIFCqpUtaiUlVaId98YNWlpmrEmWlVnbhABn+YLjucjjpPP5nn9+PH6sNm97N+b5a/PZrt/Wh03+1239fm1aB4Pm+128/pw+ePGlC+Ovtu/v612ZfP9uDocm2WOi2a9e26W1rdd/GWzXTfLYL4Wo5Yu0Kmpt/HcNN1oSjbbU1sik/nGgfKpbXDmsunvReOcQmavkDkoZI4KmZNC5lYhc9bH7I1CZquQWaEHvUIPelQP5nRqG224Zkb1IMeM6kGOGdWDHDOqBzlmVA8yzAHVgxwzqgc5ZlQPcsyoHuSYFXowKPRgUOjBoNCDAcKDBQRCbh1IhDBWAYHQUAGBcEsBgRBGAYGwQAGBKO0FBKJeFxCIIlxAUCprRKmsCaWypjsOX3JnEE/XIHc8WZPtP5bSz+kdUeNC3WJS2xhNzxBTe02dNVK3RiW1VUlNoNQpuZ4h5esa0jqV1F4ldVBJHVVSg7qxQo3qRp4a1Y0sdUZ1I0+N6kaeWqUbs0o3ZpVuzCrdmFW6Mat0Y0Z1Yzb9wgebaUSN6kaW2pqbcrTRDtc/+ZL7O2LlEZJHnDzi5ZE7jmtn+pO+m+yxo45IMCQtDMkdxxS1eSAxVBlThvoP7s6g63tl1hqd2BYU27phNuYHxAmbdGI7ndheJ3ZAxY7DkLTteEi2oNhuWCvQfTv+a6PWbR6bUOt2BRu1blewUet2BRu1blewUet2BRu1bgcadBN8GmFHndhJJzaqJSvYqJbksR2qJSvYqJasYKNaMsRhWim0eYSNaskKNqolK9iwluSxYS3JY8NakseGtSSPDWtJFtvDXpSdbwc4Gv2/7WEvynhs2IsyHhtVNxVsVN1UsFF1U8FG1U0FG3bqkseGnbpksQPs1CWPrdOSQaclA6wlvR+ww+gS+J7P0v5PbFhL8tiwluSxYS3JY8NakseGtSSLHXXe4Is6b/BFnTf4os4bfBFCN4Xk9tOKyfefn3y8jkw8vubDKZLD6Hgnnh1jIySPOHnEyyNBHonySJJHWnkkiyNZ3vtZ3vu3H02orIm7/WRALeTnhMKcUJwTSnNC7ZxQlodoYkVyJWTnhGhOyM0J+TmhKK2jNLGI2PTiyDSOiIc4TSwU5fYysUiTjTh5xMsjQX74UR5J8sjElUHf+zmNTpipZXdMZGrJGxepld4bEbF4iZw84uURee+TvPdJ3vskH5UkFi85I49YeUTY+1/d1p/VYbN63K5PLzh/+dg9Xbzv/Pj3bX316vO3w/5p/fxxWJeXoJ/ff14OkFxeUDRFSGXTxnZhkyub5Vgo2u63rttrt+d/",
  "file_map": {
    "50": {
      "source": "global len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
