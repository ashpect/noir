syntax = "proto3";

package noir.proto.acir;

import "witness.proto";

message Circuit {
  u32 current_witness_index = 1;
  repeated Opcode opcodes = 2;
  ExpressionWidth expression_width = 3;
  repeated witness.Witness private_parameters = 4;
  repeated witness.Witness public_parameters = 5;
  repeated witness.Witness return_values = 6;
  repeated AssertMessage assert_messages = 7;
}

message ExpressionWidth {
  oneof value {
    Unbounded unbounded = 1;
    Bounded bounded = 2;
  }
  message Unbounded {}
  message Bounded { u64 width = 1; }
}

message AssertMessage {
  OpcodeLocation location = 1;
  AssertionPayload payload = 2;
}

message OpcodeLocation {
  oneof value {
    u64 acir = 1;
    BrilligLocation brillig = 2;
  }
  message BrilligLocation {
    u64 acir_index = 1;
    u64 brillig_index = 2;
  }
}

message AssertionPayload {
  u64 error_selector = 1;
  repeated ExpressionOrMemory payload = 2;
}

message ExpressionOrMemory {
  oneof value {
    Expression expression = 1;
    BlockId memory = 2;
  }
}

message BlockId { u32 value = 1; }

message Expression {
  repeated MulTerm mul_terms = 1;
  repeated LinearCombination linear_combinations = 2;
  Field q_c = 3;

  message MulTerm {
    Field q_m = 1;
    witness.Witness witness_left = 2;
    witness.Witness witness_right = 3;
  }

  message LinearCombination {
    Field q_l = 1;
    witness.Witness witness = 2;
  }
}

message Field { bytes value = 1; }

message Opcode {
  oneof value {
    Expression assert_zero = 1;
    BlackBoxFuncCall blackbox_func_call = 2;
    MemoryOp memory_op = 3;
    MemoryInit memory_init = 4;
    BrilligCall brillig_call = 5;
    Call call = 6;
  }
}
message BlackBoxFuncCall {}