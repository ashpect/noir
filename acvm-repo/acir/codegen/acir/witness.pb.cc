// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: acir/witness.proto
// Protobuf C++ Version: 5.29.3

#include "acir/witness.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace acvm {
namespace acir {
namespace witness {

inline constexpr WitnessMap_WitnessValue::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        witness_{nullptr},
        field_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR WitnessMap_WitnessValue::WitnessMap_WitnessValue(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WitnessMap_WitnessValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WitnessMap_WitnessValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WitnessMap_WitnessValueDefaultTypeInternal() {}
  union {
    WitnessMap_WitnessValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WitnessMap_WitnessValueDefaultTypeInternal _WitnessMap_WitnessValue_default_instance_;

inline constexpr WitnessMap::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : values_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WitnessMap::WitnessMap(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WitnessMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WitnessMapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WitnessMapDefaultTypeInternal() {}
  union {
    WitnessMap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WitnessMapDefaultTypeInternal _WitnessMap_default_instance_;

inline constexpr WitnessStack_StackItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        witness_{nullptr},
        index_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR WitnessStack_StackItem::WitnessStack_StackItem(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WitnessStack_StackItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WitnessStack_StackItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WitnessStack_StackItemDefaultTypeInternal() {}
  union {
    WitnessStack_StackItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WitnessStack_StackItemDefaultTypeInternal _WitnessStack_StackItem_default_instance_;

inline constexpr WitnessStack::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : stack_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WitnessStack::WitnessStack(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WitnessStackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WitnessStackDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WitnessStackDefaultTypeInternal() {}
  union {
    WitnessStack _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WitnessStackDefaultTypeInternal _WitnessStack_default_instance_;
}  // namespace witness
}  // namespace acir
}  // namespace acvm
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_acir_2fwitness_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_acir_2fwitness_2eproto = nullptr;
const ::uint32_t
    TableStruct_acir_2fwitness_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessMap_WitnessValue, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessMap_WitnessValue, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessMap_WitnessValue, _impl_.witness_),
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessMap_WitnessValue, _impl_.field_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessMap, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessMap, _impl_.values_),
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessStack_StackItem, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessStack_StackItem, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessStack_StackItem, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessStack_StackItem, _impl_.witness_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessStack, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::acvm::acir::witness::WitnessStack, _impl_.stack_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::acvm::acir::witness::WitnessMap_WitnessValue)},
        {12, -1, -1, sizeof(::acvm::acir::witness::WitnessMap)},
        {21, 31, -1, sizeof(::acvm::acir::witness::WitnessStack_StackItem)},
        {33, -1, -1, sizeof(::acvm::acir::witness::WitnessStack)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::acvm::acir::witness::_WitnessMap_WitnessValue_default_instance_._instance,
    &::acvm::acir::witness::_WitnessMap_default_instance_._instance,
    &::acvm::acir::witness::_WitnessStack_StackItem_default_instance_._instance,
    &::acvm::acir::witness::_WitnessStack_default_instance_._instance,
};
const char descriptor_table_protodef_acir_2fwitness_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\022acir/witness.proto\022\021acvm.acir.witness\032"
    "\021acir/native.proto\"\254\001\n\nWitnessMap\022:\n\006val"
    "ues\030\001 \003(\0132*.acvm.acir.witness.WitnessMap"
    ".WitnessValue\032b\n\014WitnessValue\022*\n\007witness"
    "\030\001 \001(\0132\031.acvm.acir.native.Witness\022&\n\005fie"
    "ld\030\002 \001(\0132\027.acvm.acir.native.Field\"\224\001\n\014Wi"
    "tnessStack\0228\n\005stack\030\001 \003(\0132).acvm.acir.wi"
    "tness.WitnessStack.StackItem\032J\n\tStackIte"
    "m\022\r\n\005index\030\001 \001(\r\022.\n\007witness\030\002 \001(\0132\035.acvm"
    ".acir.witness.WitnessMapb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_acir_2fwitness_2eproto_deps[1] =
    {
        &::descriptor_table_acir_2fnative_2eproto,
};
static ::absl::once_flag descriptor_table_acir_2fwitness_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_acir_2fwitness_2eproto = {
    false,
    false,
    392,
    descriptor_table_protodef_acir_2fwitness_2eproto,
    "acir/witness.proto",
    &descriptor_table_acir_2fwitness_2eproto_once,
    descriptor_table_acir_2fwitness_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_acir_2fwitness_2eproto::offsets,
    file_level_enum_descriptors_acir_2fwitness_2eproto,
    file_level_service_descriptors_acir_2fwitness_2eproto,
};
namespace acvm {
namespace acir {
namespace witness {
// ===================================================================

class WitnessMap_WitnessValue::_Internal {
 public:
  using HasBits =
      decltype(std::declval<WitnessMap_WitnessValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WitnessMap_WitnessValue, _impl_._has_bits_);
};

void WitnessMap_WitnessValue::clear_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.witness_ != nullptr) _impl_.witness_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void WitnessMap_WitnessValue::clear_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.field_ != nullptr) _impl_.field_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
WitnessMap_WitnessValue::WitnessMap_WitnessValue(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:acvm.acir.witness.WitnessMap.WitnessValue)
}
inline PROTOBUF_NDEBUG_INLINE WitnessMap_WitnessValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::acvm::acir::witness::WitnessMap_WitnessValue& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

WitnessMap_WitnessValue::WitnessMap_WitnessValue(
    ::google::protobuf::Arena* arena,
    const WitnessMap_WitnessValue& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WitnessMap_WitnessValue* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.witness_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::acvm::acir::native::Witness>(
                              arena, *from._impl_.witness_)
                        : nullptr;
  _impl_.field_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::acvm::acir::native::Field>(
                              arena, *from._impl_.field_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:acvm.acir.witness.WitnessMap.WitnessValue)
}
inline PROTOBUF_NDEBUG_INLINE WitnessMap_WitnessValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void WitnessMap_WitnessValue::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, witness_),
           0,
           offsetof(Impl_, field_) -
               offsetof(Impl_, witness_) +
               sizeof(Impl_::field_));
}
WitnessMap_WitnessValue::~WitnessMap_WitnessValue() {
  // @@protoc_insertion_point(destructor:acvm.acir.witness.WitnessMap.WitnessValue)
  SharedDtor(*this);
}
inline void WitnessMap_WitnessValue::SharedDtor(MessageLite& self) {
  WitnessMap_WitnessValue& this_ = static_cast<WitnessMap_WitnessValue&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.witness_;
  delete this_._impl_.field_;
  this_._impl_.~Impl_();
}

inline void* WitnessMap_WitnessValue::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WitnessMap_WitnessValue(arena);
}
constexpr auto WitnessMap_WitnessValue::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(WitnessMap_WitnessValue),
                                            alignof(WitnessMap_WitnessValue));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WitnessMap_WitnessValue::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WitnessMap_WitnessValue_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WitnessMap_WitnessValue::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WitnessMap_WitnessValue>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WitnessMap_WitnessValue::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WitnessMap_WitnessValue>(), &WitnessMap_WitnessValue::ByteSizeLong,
            &WitnessMap_WitnessValue::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WitnessMap_WitnessValue, _impl_._cached_size_),
        false,
    },
    &WitnessMap_WitnessValue::kDescriptorMethods,
    &descriptor_table_acir_2fwitness_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WitnessMap_WitnessValue::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> WitnessMap_WitnessValue::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WitnessMap_WitnessValue, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::acvm::acir::witness::WitnessMap_WitnessValue>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .acvm.acir.native.Field field = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(WitnessMap_WitnessValue, _impl_.field_)}},
    // .acvm.acir.native.Witness witness = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(WitnessMap_WitnessValue, _impl_.witness_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .acvm.acir.native.Witness witness = 1;
    {PROTOBUF_FIELD_OFFSET(WitnessMap_WitnessValue, _impl_.witness_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .acvm.acir.native.Field field = 2;
    {PROTOBUF_FIELD_OFFSET(WitnessMap_WitnessValue, _impl_.field_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::acvm::acir::native::Witness>()},
    {::_pbi::TcParser::GetTable<::acvm::acir::native::Field>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void WitnessMap_WitnessValue::Clear() {
// @@protoc_insertion_point(message_clear_start:acvm.acir.witness.WitnessMap.WitnessValue)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.witness_ != nullptr);
      _impl_.witness_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.field_ != nullptr);
      _impl_.field_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WitnessMap_WitnessValue::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WitnessMap_WitnessValue& this_ = static_cast<const WitnessMap_WitnessValue&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WitnessMap_WitnessValue::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WitnessMap_WitnessValue& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:acvm.acir.witness.WitnessMap.WitnessValue)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .acvm.acir.native.Witness witness = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.witness_, this_._impl_.witness_->GetCachedSize(), target,
                stream);
          }

          // .acvm.acir.native.Field field = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.field_, this_._impl_.field_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:acvm.acir.witness.WitnessMap.WitnessValue)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WitnessMap_WitnessValue::ByteSizeLong(const MessageLite& base) {
          const WitnessMap_WitnessValue& this_ = static_cast<const WitnessMap_WitnessValue&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WitnessMap_WitnessValue::ByteSizeLong() const {
          const WitnessMap_WitnessValue& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:acvm.acir.witness.WitnessMap.WitnessValue)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .acvm.acir.native.Witness witness = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.witness_);
            }
            // .acvm.acir.native.Field field = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.field_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WitnessMap_WitnessValue::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WitnessMap_WitnessValue*>(&to_msg);
  auto& from = static_cast<const WitnessMap_WitnessValue&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:acvm.acir.witness.WitnessMap.WitnessValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.witness_ != nullptr);
      if (_this->_impl_.witness_ == nullptr) {
        _this->_impl_.witness_ =
            ::google::protobuf::Message::CopyConstruct<::acvm::acir::native::Witness>(arena, *from._impl_.witness_);
      } else {
        _this->_impl_.witness_->MergeFrom(*from._impl_.witness_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.field_ != nullptr);
      if (_this->_impl_.field_ == nullptr) {
        _this->_impl_.field_ =
            ::google::protobuf::Message::CopyConstruct<::acvm::acir::native::Field>(arena, *from._impl_.field_);
      } else {
        _this->_impl_.field_->MergeFrom(*from._impl_.field_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WitnessMap_WitnessValue::CopyFrom(const WitnessMap_WitnessValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acvm.acir.witness.WitnessMap.WitnessValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WitnessMap_WitnessValue::InternalSwap(WitnessMap_WitnessValue* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WitnessMap_WitnessValue, _impl_.field_)
      + sizeof(WitnessMap_WitnessValue::_impl_.field_)
      - PROTOBUF_FIELD_OFFSET(WitnessMap_WitnessValue, _impl_.witness_)>(
          reinterpret_cast<char*>(&_impl_.witness_),
          reinterpret_cast<char*>(&other->_impl_.witness_));
}

::google::protobuf::Metadata WitnessMap_WitnessValue::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WitnessMap::_Internal {
 public:
};

WitnessMap::WitnessMap(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:acvm.acir.witness.WitnessMap)
}
inline PROTOBUF_NDEBUG_INLINE WitnessMap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::acvm::acir::witness::WitnessMap& from_msg)
      : values_{visibility, arena, from.values_},
        _cached_size_{0} {}

WitnessMap::WitnessMap(
    ::google::protobuf::Arena* arena,
    const WitnessMap& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WitnessMap* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:acvm.acir.witness.WitnessMap)
}
inline PROTOBUF_NDEBUG_INLINE WitnessMap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : values_{visibility, arena},
        _cached_size_{0} {}

inline void WitnessMap::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
WitnessMap::~WitnessMap() {
  // @@protoc_insertion_point(destructor:acvm.acir.witness.WitnessMap)
  SharedDtor(*this);
}
inline void WitnessMap::SharedDtor(MessageLite& self) {
  WitnessMap& this_ = static_cast<WitnessMap&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* WitnessMap::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WitnessMap(arena);
}
constexpr auto WitnessMap::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(WitnessMap, _impl_.values_) +
          decltype(WitnessMap::_impl_.values_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(WitnessMap), alignof(WitnessMap), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&WitnessMap::PlacementNew_,
                                 sizeof(WitnessMap),
                                 alignof(WitnessMap));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WitnessMap::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WitnessMap_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WitnessMap::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WitnessMap>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WitnessMap::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WitnessMap>(), &WitnessMap::ByteSizeLong,
            &WitnessMap::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WitnessMap, _impl_._cached_size_),
        false,
    },
    &WitnessMap::kDescriptorMethods,
    &descriptor_table_acir_2fwitness_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WitnessMap::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> WitnessMap::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::acvm::acir::witness::WitnessMap>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .acvm.acir.witness.WitnessMap.WitnessValue values = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WitnessMap, _impl_.values_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .acvm.acir.witness.WitnessMap.WitnessValue values = 1;
    {PROTOBUF_FIELD_OFFSET(WitnessMap, _impl_.values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::acvm::acir::witness::WitnessMap_WitnessValue>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void WitnessMap::Clear() {
// @@protoc_insertion_point(message_clear_start:acvm.acir.witness.WitnessMap)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WitnessMap::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WitnessMap& this_ = static_cast<const WitnessMap&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WitnessMap::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WitnessMap& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:acvm.acir.witness.WitnessMap)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .acvm.acir.witness.WitnessMap.WitnessValue values = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_values_size());
               i < n; i++) {
            const auto& repfield = this_._internal_values().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:acvm.acir.witness.WitnessMap)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WitnessMap::ByteSizeLong(const MessageLite& base) {
          const WitnessMap& this_ = static_cast<const WitnessMap&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WitnessMap::ByteSizeLong() const {
          const WitnessMap& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:acvm.acir.witness.WitnessMap)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .acvm.acir.witness.WitnessMap.WitnessValue values = 1;
            {
              total_size += 1UL * this_._internal_values_size();
              for (const auto& msg : this_._internal_values()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WitnessMap::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WitnessMap*>(&to_msg);
  auto& from = static_cast<const WitnessMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:acvm.acir.witness.WitnessMap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(
      from._internal_values());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WitnessMap::CopyFrom(const WitnessMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acvm.acir.witness.WitnessMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WitnessMap::InternalSwap(WitnessMap* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::google::protobuf::Metadata WitnessMap::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WitnessStack_StackItem::_Internal {
 public:
  using HasBits =
      decltype(std::declval<WitnessStack_StackItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WitnessStack_StackItem, _impl_._has_bits_);
};

WitnessStack_StackItem::WitnessStack_StackItem(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:acvm.acir.witness.WitnessStack.StackItem)
}
inline PROTOBUF_NDEBUG_INLINE WitnessStack_StackItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::acvm::acir::witness::WitnessStack_StackItem& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

WitnessStack_StackItem::WitnessStack_StackItem(
    ::google::protobuf::Arena* arena,
    const WitnessStack_StackItem& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WitnessStack_StackItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.witness_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::acvm::acir::witness::WitnessMap>(
                              arena, *from._impl_.witness_)
                        : nullptr;
  _impl_.index_ = from._impl_.index_;

  // @@protoc_insertion_point(copy_constructor:acvm.acir.witness.WitnessStack.StackItem)
}
inline PROTOBUF_NDEBUG_INLINE WitnessStack_StackItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void WitnessStack_StackItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, witness_),
           0,
           offsetof(Impl_, index_) -
               offsetof(Impl_, witness_) +
               sizeof(Impl_::index_));
}
WitnessStack_StackItem::~WitnessStack_StackItem() {
  // @@protoc_insertion_point(destructor:acvm.acir.witness.WitnessStack.StackItem)
  SharedDtor(*this);
}
inline void WitnessStack_StackItem::SharedDtor(MessageLite& self) {
  WitnessStack_StackItem& this_ = static_cast<WitnessStack_StackItem&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.witness_;
  this_._impl_.~Impl_();
}

inline void* WitnessStack_StackItem::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WitnessStack_StackItem(arena);
}
constexpr auto WitnessStack_StackItem::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(WitnessStack_StackItem),
                                            alignof(WitnessStack_StackItem));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WitnessStack_StackItem::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WitnessStack_StackItem_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WitnessStack_StackItem::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WitnessStack_StackItem>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WitnessStack_StackItem::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WitnessStack_StackItem>(), &WitnessStack_StackItem::ByteSizeLong,
            &WitnessStack_StackItem::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WitnessStack_StackItem, _impl_._cached_size_),
        false,
    },
    &WitnessStack_StackItem::kDescriptorMethods,
    &descriptor_table_acir_2fwitness_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WitnessStack_StackItem::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> WitnessStack_StackItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WitnessStack_StackItem, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::acvm::acir::witness::WitnessStack_StackItem>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .acvm.acir.witness.WitnessMap witness = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(WitnessStack_StackItem, _impl_.witness_)}},
    // uint32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WitnessStack_StackItem, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WitnessStack_StackItem, _impl_.index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 index = 1;
    {PROTOBUF_FIELD_OFFSET(WitnessStack_StackItem, _impl_.index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .acvm.acir.witness.WitnessMap witness = 2;
    {PROTOBUF_FIELD_OFFSET(WitnessStack_StackItem, _impl_.witness_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::acvm::acir::witness::WitnessMap>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void WitnessStack_StackItem::Clear() {
// @@protoc_insertion_point(message_clear_start:acvm.acir.witness.WitnessStack.StackItem)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.witness_ != nullptr);
    _impl_.witness_->Clear();
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WitnessStack_StackItem::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WitnessStack_StackItem& this_ = static_cast<const WitnessStack_StackItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WitnessStack_StackItem::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WitnessStack_StackItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:acvm.acir.witness.WitnessStack.StackItem)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 index = 1;
          if (this_._internal_index() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_index(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .acvm.acir.witness.WitnessMap witness = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.witness_, this_._impl_.witness_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:acvm.acir.witness.WitnessStack.StackItem)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WitnessStack_StackItem::ByteSizeLong(const MessageLite& base) {
          const WitnessStack_StackItem& this_ = static_cast<const WitnessStack_StackItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WitnessStack_StackItem::ByteSizeLong() const {
          const WitnessStack_StackItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:acvm.acir.witness.WitnessStack.StackItem)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .acvm.acir.witness.WitnessMap witness = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.witness_);
            }
          }
           {
            // uint32 index = 1;
            if (this_._internal_index() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_index());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WitnessStack_StackItem::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WitnessStack_StackItem*>(&to_msg);
  auto& from = static_cast<const WitnessStack_StackItem&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:acvm.acir.witness.WitnessStack.StackItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.witness_ != nullptr);
    if (_this->_impl_.witness_ == nullptr) {
      _this->_impl_.witness_ =
          ::google::protobuf::Message::CopyConstruct<::acvm::acir::witness::WitnessMap>(arena, *from._impl_.witness_);
    } else {
      _this->_impl_.witness_->MergeFrom(*from._impl_.witness_);
    }
  }
  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WitnessStack_StackItem::CopyFrom(const WitnessStack_StackItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acvm.acir.witness.WitnessStack.StackItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WitnessStack_StackItem::InternalSwap(WitnessStack_StackItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WitnessStack_StackItem, _impl_.index_)
      + sizeof(WitnessStack_StackItem::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(WitnessStack_StackItem, _impl_.witness_)>(
          reinterpret_cast<char*>(&_impl_.witness_),
          reinterpret_cast<char*>(&other->_impl_.witness_));
}

::google::protobuf::Metadata WitnessStack_StackItem::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WitnessStack::_Internal {
 public:
};

WitnessStack::WitnessStack(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:acvm.acir.witness.WitnessStack)
}
inline PROTOBUF_NDEBUG_INLINE WitnessStack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::acvm::acir::witness::WitnessStack& from_msg)
      : stack_{visibility, arena, from.stack_},
        _cached_size_{0} {}

WitnessStack::WitnessStack(
    ::google::protobuf::Arena* arena,
    const WitnessStack& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WitnessStack* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:acvm.acir.witness.WitnessStack)
}
inline PROTOBUF_NDEBUG_INLINE WitnessStack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : stack_{visibility, arena},
        _cached_size_{0} {}

inline void WitnessStack::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
WitnessStack::~WitnessStack() {
  // @@protoc_insertion_point(destructor:acvm.acir.witness.WitnessStack)
  SharedDtor(*this);
}
inline void WitnessStack::SharedDtor(MessageLite& self) {
  WitnessStack& this_ = static_cast<WitnessStack&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* WitnessStack::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WitnessStack(arena);
}
constexpr auto WitnessStack::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(WitnessStack, _impl_.stack_) +
          decltype(WitnessStack::_impl_.stack_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(WitnessStack), alignof(WitnessStack), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&WitnessStack::PlacementNew_,
                                 sizeof(WitnessStack),
                                 alignof(WitnessStack));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WitnessStack::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WitnessStack_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WitnessStack::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WitnessStack>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WitnessStack::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WitnessStack>(), &WitnessStack::ByteSizeLong,
            &WitnessStack::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WitnessStack, _impl_._cached_size_),
        false,
    },
    &WitnessStack::kDescriptorMethods,
    &descriptor_table_acir_2fwitness_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WitnessStack::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> WitnessStack::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::acvm::acir::witness::WitnessStack>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .acvm.acir.witness.WitnessStack.StackItem stack = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WitnessStack, _impl_.stack_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .acvm.acir.witness.WitnessStack.StackItem stack = 1;
    {PROTOBUF_FIELD_OFFSET(WitnessStack, _impl_.stack_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::acvm::acir::witness::WitnessStack_StackItem>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void WitnessStack::Clear() {
// @@protoc_insertion_point(message_clear_start:acvm.acir.witness.WitnessStack)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stack_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WitnessStack::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WitnessStack& this_ = static_cast<const WitnessStack&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WitnessStack::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WitnessStack& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:acvm.acir.witness.WitnessStack)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .acvm.acir.witness.WitnessStack.StackItem stack = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_stack_size());
               i < n; i++) {
            const auto& repfield = this_._internal_stack().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:acvm.acir.witness.WitnessStack)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WitnessStack::ByteSizeLong(const MessageLite& base) {
          const WitnessStack& this_ = static_cast<const WitnessStack&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WitnessStack::ByteSizeLong() const {
          const WitnessStack& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:acvm.acir.witness.WitnessStack)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .acvm.acir.witness.WitnessStack.StackItem stack = 1;
            {
              total_size += 1UL * this_._internal_stack_size();
              for (const auto& msg : this_._internal_stack()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WitnessStack::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WitnessStack*>(&to_msg);
  auto& from = static_cast<const WitnessStack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:acvm.acir.witness.WitnessStack)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_stack()->MergeFrom(
      from._internal_stack());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WitnessStack::CopyFrom(const WitnessStack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acvm.acir.witness.WitnessStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WitnessStack::InternalSwap(WitnessStack* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stack_.InternalSwap(&other->_impl_.stack_);
}

::google::protobuf::Metadata WitnessStack::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace witness
}  // namespace acir
}  // namespace acvm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_acir_2fwitness_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
