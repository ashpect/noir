// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: acir/witness.proto
// Protobuf C++ Version: 5.29.3

#ifndef acir_2fwitness_2eproto_2epb_2eh
#define acir_2fwitness_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "acir/native.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_acir_2fwitness_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_acir_2fwitness_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_acir_2fwitness_2eproto;
namespace acvm {
namespace acir {
namespace witness {
class WitnessMap;
struct WitnessMapDefaultTypeInternal;
extern WitnessMapDefaultTypeInternal _WitnessMap_default_instance_;
class WitnessMap_WitnessValue;
struct WitnessMap_WitnessValueDefaultTypeInternal;
extern WitnessMap_WitnessValueDefaultTypeInternal _WitnessMap_WitnessValue_default_instance_;
class WitnessStack;
struct WitnessStackDefaultTypeInternal;
extern WitnessStackDefaultTypeInternal _WitnessStack_default_instance_;
class WitnessStack_StackItem;
struct WitnessStack_StackItemDefaultTypeInternal;
extern WitnessStack_StackItemDefaultTypeInternal _WitnessStack_StackItem_default_instance_;
}  // namespace witness
}  // namespace acir
}  // namespace acvm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace acvm {
namespace acir {
namespace witness {

// ===================================================================


// -------------------------------------------------------------------

class WitnessMap_WitnessValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:acvm.acir.witness.WitnessMap.WitnessValue) */ {
 public:
  inline WitnessMap_WitnessValue() : WitnessMap_WitnessValue(nullptr) {}
  ~WitnessMap_WitnessValue() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WitnessMap_WitnessValue* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WitnessMap_WitnessValue));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WitnessMap_WitnessValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline WitnessMap_WitnessValue(const WitnessMap_WitnessValue& from) : WitnessMap_WitnessValue(nullptr, from) {}
  inline WitnessMap_WitnessValue(WitnessMap_WitnessValue&& from) noexcept
      : WitnessMap_WitnessValue(nullptr, std::move(from)) {}
  inline WitnessMap_WitnessValue& operator=(const WitnessMap_WitnessValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline WitnessMap_WitnessValue& operator=(WitnessMap_WitnessValue&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WitnessMap_WitnessValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const WitnessMap_WitnessValue* internal_default_instance() {
    return reinterpret_cast<const WitnessMap_WitnessValue*>(
        &_WitnessMap_WitnessValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(WitnessMap_WitnessValue& a, WitnessMap_WitnessValue& b) { a.Swap(&b); }
  inline void Swap(WitnessMap_WitnessValue* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WitnessMap_WitnessValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WitnessMap_WitnessValue* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WitnessMap_WitnessValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WitnessMap_WitnessValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WitnessMap_WitnessValue& from) { WitnessMap_WitnessValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WitnessMap_WitnessValue* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "acvm.acir.witness.WitnessMap.WitnessValue"; }

 protected:
  explicit WitnessMap_WitnessValue(::google::protobuf::Arena* arena);
  WitnessMap_WitnessValue(::google::protobuf::Arena* arena, const WitnessMap_WitnessValue& from);
  WitnessMap_WitnessValue(::google::protobuf::Arena* arena, WitnessMap_WitnessValue&& from) noexcept
      : WitnessMap_WitnessValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWitnessFieldNumber = 1,
    kFieldFieldNumber = 2,
  };
  // .acvm.acir.native.Witness witness = 1;
  bool has_witness() const;
  void clear_witness() ;
  const ::acvm::acir::native::Witness& witness() const;
  PROTOBUF_NODISCARD ::acvm::acir::native::Witness* release_witness();
  ::acvm::acir::native::Witness* mutable_witness();
  void set_allocated_witness(::acvm::acir::native::Witness* value);
  void unsafe_arena_set_allocated_witness(::acvm::acir::native::Witness* value);
  ::acvm::acir::native::Witness* unsafe_arena_release_witness();

  private:
  const ::acvm::acir::native::Witness& _internal_witness() const;
  ::acvm::acir::native::Witness* _internal_mutable_witness();

  public:
  // .acvm.acir.native.Field field = 2;
  bool has_field() const;
  void clear_field() ;
  const ::acvm::acir::native::Field& field() const;
  PROTOBUF_NODISCARD ::acvm::acir::native::Field* release_field();
  ::acvm::acir::native::Field* mutable_field();
  void set_allocated_field(::acvm::acir::native::Field* value);
  void unsafe_arena_set_allocated_field(::acvm::acir::native::Field* value);
  ::acvm::acir::native::Field* unsafe_arena_release_field();

  private:
  const ::acvm::acir::native::Field& _internal_field() const;
  ::acvm::acir::native::Field* _internal_mutable_field();

  public:
  // @@protoc_insertion_point(class_scope:acvm.acir.witness.WitnessMap.WitnessValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WitnessMap_WitnessValue& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::acvm::acir::native::Witness* witness_;
    ::acvm::acir::native::Field* field_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acir_2fwitness_2eproto;
};
// -------------------------------------------------------------------

class WitnessMap final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:acvm.acir.witness.WitnessMap) */ {
 public:
  inline WitnessMap() : WitnessMap(nullptr) {}
  ~WitnessMap() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WitnessMap* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WitnessMap));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WitnessMap(
      ::google::protobuf::internal::ConstantInitialized);

  inline WitnessMap(const WitnessMap& from) : WitnessMap(nullptr, from) {}
  inline WitnessMap(WitnessMap&& from) noexcept
      : WitnessMap(nullptr, std::move(from)) {}
  inline WitnessMap& operator=(const WitnessMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline WitnessMap& operator=(WitnessMap&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WitnessMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const WitnessMap* internal_default_instance() {
    return reinterpret_cast<const WitnessMap*>(
        &_WitnessMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(WitnessMap& a, WitnessMap& b) { a.Swap(&b); }
  inline void Swap(WitnessMap* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WitnessMap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WitnessMap* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WitnessMap>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WitnessMap& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WitnessMap& from) { WitnessMap::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WitnessMap* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "acvm.acir.witness.WitnessMap"; }

 protected:
  explicit WitnessMap(::google::protobuf::Arena* arena);
  WitnessMap(::google::protobuf::Arena* arena, const WitnessMap& from);
  WitnessMap(::google::protobuf::Arena* arena, WitnessMap&& from) noexcept
      : WitnessMap(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using WitnessValue = WitnessMap_WitnessValue;

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .acvm.acir.witness.WitnessMap.WitnessValue values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::acvm::acir::witness::WitnessMap_WitnessValue* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessMap_WitnessValue>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessMap_WitnessValue>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessMap_WitnessValue>* _internal_mutable_values();
  public:
  const ::acvm::acir::witness::WitnessMap_WitnessValue& values(int index) const;
  ::acvm::acir::witness::WitnessMap_WitnessValue* add_values();
  const ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessMap_WitnessValue>& values() const;
  // @@protoc_insertion_point(class_scope:acvm.acir.witness.WitnessMap)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WitnessMap& from_msg);
    ::google::protobuf::RepeatedPtrField< ::acvm::acir::witness::WitnessMap_WitnessValue > values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acir_2fwitness_2eproto;
};
// -------------------------------------------------------------------

class WitnessStack_StackItem final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:acvm.acir.witness.WitnessStack.StackItem) */ {
 public:
  inline WitnessStack_StackItem() : WitnessStack_StackItem(nullptr) {}
  ~WitnessStack_StackItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WitnessStack_StackItem* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WitnessStack_StackItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WitnessStack_StackItem(
      ::google::protobuf::internal::ConstantInitialized);

  inline WitnessStack_StackItem(const WitnessStack_StackItem& from) : WitnessStack_StackItem(nullptr, from) {}
  inline WitnessStack_StackItem(WitnessStack_StackItem&& from) noexcept
      : WitnessStack_StackItem(nullptr, std::move(from)) {}
  inline WitnessStack_StackItem& operator=(const WitnessStack_StackItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline WitnessStack_StackItem& operator=(WitnessStack_StackItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WitnessStack_StackItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const WitnessStack_StackItem* internal_default_instance() {
    return reinterpret_cast<const WitnessStack_StackItem*>(
        &_WitnessStack_StackItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(WitnessStack_StackItem& a, WitnessStack_StackItem& b) { a.Swap(&b); }
  inline void Swap(WitnessStack_StackItem* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WitnessStack_StackItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WitnessStack_StackItem* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WitnessStack_StackItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WitnessStack_StackItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WitnessStack_StackItem& from) { WitnessStack_StackItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WitnessStack_StackItem* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "acvm.acir.witness.WitnessStack.StackItem"; }

 protected:
  explicit WitnessStack_StackItem(::google::protobuf::Arena* arena);
  WitnessStack_StackItem(::google::protobuf::Arena* arena, const WitnessStack_StackItem& from);
  WitnessStack_StackItem(::google::protobuf::Arena* arena, WitnessStack_StackItem&& from) noexcept
      : WitnessStack_StackItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWitnessFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .acvm.acir.witness.WitnessMap witness = 2;
  bool has_witness() const;
  void clear_witness() ;
  const ::acvm::acir::witness::WitnessMap& witness() const;
  PROTOBUF_NODISCARD ::acvm::acir::witness::WitnessMap* release_witness();
  ::acvm::acir::witness::WitnessMap* mutable_witness();
  void set_allocated_witness(::acvm::acir::witness::WitnessMap* value);
  void unsafe_arena_set_allocated_witness(::acvm::acir::witness::WitnessMap* value);
  ::acvm::acir::witness::WitnessMap* unsafe_arena_release_witness();

  private:
  const ::acvm::acir::witness::WitnessMap& _internal_witness() const;
  ::acvm::acir::witness::WitnessMap* _internal_mutable_witness();

  public:
  // uint32 index = 1;
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:acvm.acir.witness.WitnessStack.StackItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WitnessStack_StackItem& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::acvm::acir::witness::WitnessMap* witness_;
    ::uint32_t index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acir_2fwitness_2eproto;
};
// -------------------------------------------------------------------

class WitnessStack final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:acvm.acir.witness.WitnessStack) */ {
 public:
  inline WitnessStack() : WitnessStack(nullptr) {}
  ~WitnessStack() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WitnessStack* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WitnessStack));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WitnessStack(
      ::google::protobuf::internal::ConstantInitialized);

  inline WitnessStack(const WitnessStack& from) : WitnessStack(nullptr, from) {}
  inline WitnessStack(WitnessStack&& from) noexcept
      : WitnessStack(nullptr, std::move(from)) {}
  inline WitnessStack& operator=(const WitnessStack& from) {
    CopyFrom(from);
    return *this;
  }
  inline WitnessStack& operator=(WitnessStack&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WitnessStack& default_instance() {
    return *internal_default_instance();
  }
  static inline const WitnessStack* internal_default_instance() {
    return reinterpret_cast<const WitnessStack*>(
        &_WitnessStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(WitnessStack& a, WitnessStack& b) { a.Swap(&b); }
  inline void Swap(WitnessStack* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WitnessStack* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WitnessStack* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WitnessStack>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WitnessStack& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WitnessStack& from) { WitnessStack::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WitnessStack* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "acvm.acir.witness.WitnessStack"; }

 protected:
  explicit WitnessStack(::google::protobuf::Arena* arena);
  WitnessStack(::google::protobuf::Arena* arena, const WitnessStack& from);
  WitnessStack(::google::protobuf::Arena* arena, WitnessStack&& from) noexcept
      : WitnessStack(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using StackItem = WitnessStack_StackItem;

  // accessors -------------------------------------------------------
  enum : int {
    kStackFieldNumber = 1,
  };
  // repeated .acvm.acir.witness.WitnessStack.StackItem stack = 1;
  int stack_size() const;
  private:
  int _internal_stack_size() const;

  public:
  void clear_stack() ;
  ::acvm::acir::witness::WitnessStack_StackItem* mutable_stack(int index);
  ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessStack_StackItem>* mutable_stack();

  private:
  const ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessStack_StackItem>& _internal_stack() const;
  ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessStack_StackItem>* _internal_mutable_stack();
  public:
  const ::acvm::acir::witness::WitnessStack_StackItem& stack(int index) const;
  ::acvm::acir::witness::WitnessStack_StackItem* add_stack();
  const ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessStack_StackItem>& stack() const;
  // @@protoc_insertion_point(class_scope:acvm.acir.witness.WitnessStack)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WitnessStack& from_msg);
    ::google::protobuf::RepeatedPtrField< ::acvm::acir::witness::WitnessStack_StackItem > stack_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acir_2fwitness_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WitnessMap_WitnessValue

// .acvm.acir.native.Witness witness = 1;
inline bool WitnessMap_WitnessValue::has_witness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.witness_ != nullptr);
  return value;
}
inline const ::acvm::acir::native::Witness& WitnessMap_WitnessValue::_internal_witness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::acvm::acir::native::Witness* p = _impl_.witness_;
  return p != nullptr ? *p : reinterpret_cast<const ::acvm::acir::native::Witness&>(::acvm::acir::native::_Witness_default_instance_);
}
inline const ::acvm::acir::native::Witness& WitnessMap_WitnessValue::witness() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.witness.WitnessMap.WitnessValue.witness)
  return _internal_witness();
}
inline void WitnessMap_WitnessValue::unsafe_arena_set_allocated_witness(::acvm::acir::native::Witness* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.witness_);
  }
  _impl_.witness_ = reinterpret_cast<::acvm::acir::native::Witness*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acvm.acir.witness.WitnessMap.WitnessValue.witness)
}
inline ::acvm::acir::native::Witness* WitnessMap_WitnessValue::release_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acvm::acir::native::Witness* released = _impl_.witness_;
  _impl_.witness_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::acvm::acir::native::Witness* WitnessMap_WitnessValue::unsafe_arena_release_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:acvm.acir.witness.WitnessMap.WitnessValue.witness)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acvm::acir::native::Witness* temp = _impl_.witness_;
  _impl_.witness_ = nullptr;
  return temp;
}
inline ::acvm::acir::native::Witness* WitnessMap_WitnessValue::_internal_mutable_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.witness_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::acvm::acir::native::Witness>(GetArena());
    _impl_.witness_ = reinterpret_cast<::acvm::acir::native::Witness*>(p);
  }
  return _impl_.witness_;
}
inline ::acvm::acir::native::Witness* WitnessMap_WitnessValue::mutable_witness() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::acvm::acir::native::Witness* _msg = _internal_mutable_witness();
  // @@protoc_insertion_point(field_mutable:acvm.acir.witness.WitnessMap.WitnessValue.witness)
  return _msg;
}
inline void WitnessMap_WitnessValue::set_allocated_witness(::acvm::acir::native::Witness* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.witness_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.witness_ = reinterpret_cast<::acvm::acir::native::Witness*>(value);
  // @@protoc_insertion_point(field_set_allocated:acvm.acir.witness.WitnessMap.WitnessValue.witness)
}

// .acvm.acir.native.Field field = 2;
inline bool WitnessMap_WitnessValue::has_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.field_ != nullptr);
  return value;
}
inline const ::acvm::acir::native::Field& WitnessMap_WitnessValue::_internal_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::acvm::acir::native::Field* p = _impl_.field_;
  return p != nullptr ? *p : reinterpret_cast<const ::acvm::acir::native::Field&>(::acvm::acir::native::_Field_default_instance_);
}
inline const ::acvm::acir::native::Field& WitnessMap_WitnessValue::field() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.witness.WitnessMap.WitnessValue.field)
  return _internal_field();
}
inline void WitnessMap_WitnessValue::unsafe_arena_set_allocated_field(::acvm::acir::native::Field* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.field_);
  }
  _impl_.field_ = reinterpret_cast<::acvm::acir::native::Field*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acvm.acir.witness.WitnessMap.WitnessValue.field)
}
inline ::acvm::acir::native::Field* WitnessMap_WitnessValue::release_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::acvm::acir::native::Field* released = _impl_.field_;
  _impl_.field_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::acvm::acir::native::Field* WitnessMap_WitnessValue::unsafe_arena_release_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:acvm.acir.witness.WitnessMap.WitnessValue.field)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::acvm::acir::native::Field* temp = _impl_.field_;
  _impl_.field_ = nullptr;
  return temp;
}
inline ::acvm::acir::native::Field* WitnessMap_WitnessValue::_internal_mutable_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.field_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::acvm::acir::native::Field>(GetArena());
    _impl_.field_ = reinterpret_cast<::acvm::acir::native::Field*>(p);
  }
  return _impl_.field_;
}
inline ::acvm::acir::native::Field* WitnessMap_WitnessValue::mutable_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::acvm::acir::native::Field* _msg = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:acvm.acir.witness.WitnessMap.WitnessValue.field)
  return _msg;
}
inline void WitnessMap_WitnessValue::set_allocated_field(::acvm::acir::native::Field* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.field_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.field_ = reinterpret_cast<::acvm::acir::native::Field*>(value);
  // @@protoc_insertion_point(field_set_allocated:acvm.acir.witness.WitnessMap.WitnessValue.field)
}

// -------------------------------------------------------------------

// WitnessMap

// repeated .acvm.acir.witness.WitnessMap.WitnessValue values = 1;
inline int WitnessMap::_internal_values_size() const {
  return _internal_values().size();
}
inline int WitnessMap::values_size() const {
  return _internal_values_size();
}
inline void WitnessMap::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline ::acvm::acir::witness::WitnessMap_WitnessValue* WitnessMap::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:acvm.acir.witness.WitnessMap.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessMap_WitnessValue>* WitnessMap::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:acvm.acir.witness.WitnessMap.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::acvm::acir::witness::WitnessMap_WitnessValue& WitnessMap::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.witness.WitnessMap.values)
  return _internal_values().Get(index);
}
inline ::acvm::acir::witness::WitnessMap_WitnessValue* WitnessMap::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::acvm::acir::witness::WitnessMap_WitnessValue* _add = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add:acvm.acir.witness.WitnessMap.values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessMap_WitnessValue>& WitnessMap::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:acvm.acir.witness.WitnessMap.values)
  return _internal_values();
}
inline const ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessMap_WitnessValue>&
WitnessMap::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessMap_WitnessValue>*
WitnessMap::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// WitnessStack_StackItem

// uint32 index = 1;
inline void WitnessStack_StackItem::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0u;
}
inline ::uint32_t WitnessStack_StackItem::index() const {
  // @@protoc_insertion_point(field_get:acvm.acir.witness.WitnessStack.StackItem.index)
  return _internal_index();
}
inline void WitnessStack_StackItem::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:acvm.acir.witness.WitnessStack.StackItem.index)
}
inline ::uint32_t WitnessStack_StackItem::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void WitnessStack_StackItem::_internal_set_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// .acvm.acir.witness.WitnessMap witness = 2;
inline bool WitnessStack_StackItem::has_witness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.witness_ != nullptr);
  return value;
}
inline void WitnessStack_StackItem::clear_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.witness_ != nullptr) _impl_.witness_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::acvm::acir::witness::WitnessMap& WitnessStack_StackItem::_internal_witness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::acvm::acir::witness::WitnessMap* p = _impl_.witness_;
  return p != nullptr ? *p : reinterpret_cast<const ::acvm::acir::witness::WitnessMap&>(::acvm::acir::witness::_WitnessMap_default_instance_);
}
inline const ::acvm::acir::witness::WitnessMap& WitnessStack_StackItem::witness() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.witness.WitnessStack.StackItem.witness)
  return _internal_witness();
}
inline void WitnessStack_StackItem::unsafe_arena_set_allocated_witness(::acvm::acir::witness::WitnessMap* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.witness_);
  }
  _impl_.witness_ = reinterpret_cast<::acvm::acir::witness::WitnessMap*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acvm.acir.witness.WitnessStack.StackItem.witness)
}
inline ::acvm::acir::witness::WitnessMap* WitnessStack_StackItem::release_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acvm::acir::witness::WitnessMap* released = _impl_.witness_;
  _impl_.witness_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::acvm::acir::witness::WitnessMap* WitnessStack_StackItem::unsafe_arena_release_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:acvm.acir.witness.WitnessStack.StackItem.witness)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acvm::acir::witness::WitnessMap* temp = _impl_.witness_;
  _impl_.witness_ = nullptr;
  return temp;
}
inline ::acvm::acir::witness::WitnessMap* WitnessStack_StackItem::_internal_mutable_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.witness_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::acvm::acir::witness::WitnessMap>(GetArena());
    _impl_.witness_ = reinterpret_cast<::acvm::acir::witness::WitnessMap*>(p);
  }
  return _impl_.witness_;
}
inline ::acvm::acir::witness::WitnessMap* WitnessStack_StackItem::mutable_witness() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::acvm::acir::witness::WitnessMap* _msg = _internal_mutable_witness();
  // @@protoc_insertion_point(field_mutable:acvm.acir.witness.WitnessStack.StackItem.witness)
  return _msg;
}
inline void WitnessStack_StackItem::set_allocated_witness(::acvm::acir::witness::WitnessMap* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.witness_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.witness_ = reinterpret_cast<::acvm::acir::witness::WitnessMap*>(value);
  // @@protoc_insertion_point(field_set_allocated:acvm.acir.witness.WitnessStack.StackItem.witness)
}

// -------------------------------------------------------------------

// WitnessStack

// repeated .acvm.acir.witness.WitnessStack.StackItem stack = 1;
inline int WitnessStack::_internal_stack_size() const {
  return _internal_stack().size();
}
inline int WitnessStack::stack_size() const {
  return _internal_stack_size();
}
inline void WitnessStack::clear_stack() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stack_.Clear();
}
inline ::acvm::acir::witness::WitnessStack_StackItem* WitnessStack::mutable_stack(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:acvm.acir.witness.WitnessStack.stack)
  return _internal_mutable_stack()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessStack_StackItem>* WitnessStack::mutable_stack()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:acvm.acir.witness.WitnessStack.stack)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_stack();
}
inline const ::acvm::acir::witness::WitnessStack_StackItem& WitnessStack::stack(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.witness.WitnessStack.stack)
  return _internal_stack().Get(index);
}
inline ::acvm::acir::witness::WitnessStack_StackItem* WitnessStack::add_stack() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::acvm::acir::witness::WitnessStack_StackItem* _add = _internal_mutable_stack()->Add();
  // @@protoc_insertion_point(field_add:acvm.acir.witness.WitnessStack.stack)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessStack_StackItem>& WitnessStack::stack() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:acvm.acir.witness.WitnessStack.stack)
  return _internal_stack();
}
inline const ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessStack_StackItem>&
WitnessStack::_internal_stack() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stack_;
}
inline ::google::protobuf::RepeatedPtrField<::acvm::acir::witness::WitnessStack_StackItem>*
WitnessStack::_internal_mutable_stack() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.stack_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace witness
}  // namespace acir
}  // namespace acvm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // acir_2fwitness_2eproto_2epb_2eh
