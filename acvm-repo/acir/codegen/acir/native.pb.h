// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: acir/native.proto
// Protobuf C++ Version: 5.29.3

#ifndef acir_2fnative_2eproto_2epb_2eh
#define acir_2fnative_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_acir_2fnative_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_acir_2fnative_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_acir_2fnative_2eproto;
namespace acvm {
namespace acir {
namespace native {
class Expression;
struct ExpressionDefaultTypeInternal;
extern ExpressionDefaultTypeInternal _Expression_default_instance_;
class Expression_LinearCombination;
struct Expression_LinearCombinationDefaultTypeInternal;
extern Expression_LinearCombinationDefaultTypeInternal _Expression_LinearCombination_default_instance_;
class Expression_MulTerm;
struct Expression_MulTermDefaultTypeInternal;
extern Expression_MulTermDefaultTypeInternal _Expression_MulTerm_default_instance_;
class Field;
struct FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class Witness;
struct WitnessDefaultTypeInternal;
extern WitnessDefaultTypeInternal _Witness_default_instance_;
}  // namespace native
}  // namespace acir
}  // namespace acvm
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace acvm {
namespace acir {
namespace native {

// ===================================================================


// -------------------------------------------------------------------

class Witness final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:acvm.acir.native.Witness) */ {
 public:
  inline Witness() : Witness(nullptr) {}
  ~Witness() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Witness* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Witness));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Witness(
      ::google::protobuf::internal::ConstantInitialized);

  inline Witness(const Witness& from) : Witness(nullptr, from) {}
  inline Witness(Witness&& from) noexcept
      : Witness(nullptr, std::move(from)) {}
  inline Witness& operator=(const Witness& from) {
    CopyFrom(from);
    return *this;
  }
  inline Witness& operator=(Witness&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Witness& default_instance() {
    return *internal_default_instance();
  }
  static inline const Witness* internal_default_instance() {
    return reinterpret_cast<const Witness*>(
        &_Witness_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Witness& a, Witness& b) { a.Swap(&b); }
  inline void Swap(Witness* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Witness* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Witness* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Witness>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Witness& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Witness& from) { Witness::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Witness* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "acvm.acir.native.Witness"; }

 protected:
  explicit Witness(::google::protobuf::Arena* arena);
  Witness(::google::protobuf::Arena* arena, const Witness& from);
  Witness(::google::protobuf::Arena* arena, Witness&& from) noexcept
      : Witness(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIndexFieldNumber = 1,
  };
  // uint32 index = 1;
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:acvm.acir.native.Witness)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Witness& from_msg);
    ::uint32_t index_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acir_2fnative_2eproto;
};
// -------------------------------------------------------------------

class Field final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:acvm.acir.native.Field) */ {
 public:
  inline Field() : Field(nullptr) {}
  ~Field() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Field* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Field));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Field(
      ::google::protobuf::internal::ConstantInitialized);

  inline Field(const Field& from) : Field(nullptr, from) {}
  inline Field(Field&& from) noexcept
      : Field(nullptr, std::move(from)) {}
  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline Field& operator=(Field&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Field& default_instance() {
    return *internal_default_instance();
  }
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
        &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Field& a, Field& b) { a.Swap(&b); }
  inline void Swap(Field* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Field* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Field* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Field>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Field& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Field& from) { Field::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Field* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "acvm.acir.native.Field"; }

 protected:
  explicit Field(::google::protobuf::Arena* arena);
  Field(::google::protobuf::Arena* arena, const Field& from);
  Field(::google::protobuf::Arena* arena, Field&& from) noexcept
      : Field(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:acvm.acir.native.Field)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Field& from_msg);
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acir_2fnative_2eproto;
};
// -------------------------------------------------------------------

class Expression_MulTerm final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:acvm.acir.native.Expression.MulTerm) */ {
 public:
  inline Expression_MulTerm() : Expression_MulTerm(nullptr) {}
  ~Expression_MulTerm() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Expression_MulTerm* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Expression_MulTerm));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Expression_MulTerm(
      ::google::protobuf::internal::ConstantInitialized);

  inline Expression_MulTerm(const Expression_MulTerm& from) : Expression_MulTerm(nullptr, from) {}
  inline Expression_MulTerm(Expression_MulTerm&& from) noexcept
      : Expression_MulTerm(nullptr, std::move(from)) {}
  inline Expression_MulTerm& operator=(const Expression_MulTerm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MulTerm& operator=(Expression_MulTerm&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MulTerm& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_MulTerm* internal_default_instance() {
    return reinterpret_cast<const Expression_MulTerm*>(
        &_Expression_MulTerm_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Expression_MulTerm& a, Expression_MulTerm& b) { a.Swap(&b); }
  inline void Swap(Expression_MulTerm* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MulTerm* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MulTerm* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Expression_MulTerm>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Expression_MulTerm& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Expression_MulTerm& from) { Expression_MulTerm::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Expression_MulTerm* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "acvm.acir.native.Expression.MulTerm"; }

 protected:
  explicit Expression_MulTerm(::google::protobuf::Arena* arena);
  Expression_MulTerm(::google::protobuf::Arena* arena, const Expression_MulTerm& from);
  Expression_MulTerm(::google::protobuf::Arena* arena, Expression_MulTerm&& from) noexcept
      : Expression_MulTerm(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQMFieldNumber = 1,
    kWitnessLeftFieldNumber = 2,
    kWitnessRightFieldNumber = 3,
  };
  // .acvm.acir.native.Field q_m = 1;
  bool has_q_m() const;
  void clear_q_m() ;
  const ::acvm::acir::native::Field& q_m() const;
  PROTOBUF_NODISCARD ::acvm::acir::native::Field* release_q_m();
  ::acvm::acir::native::Field* mutable_q_m();
  void set_allocated_q_m(::acvm::acir::native::Field* value);
  void unsafe_arena_set_allocated_q_m(::acvm::acir::native::Field* value);
  ::acvm::acir::native::Field* unsafe_arena_release_q_m();

  private:
  const ::acvm::acir::native::Field& _internal_q_m() const;
  ::acvm::acir::native::Field* _internal_mutable_q_m();

  public:
  // .acvm.acir.native.Witness witness_left = 2;
  bool has_witness_left() const;
  void clear_witness_left() ;
  const ::acvm::acir::native::Witness& witness_left() const;
  PROTOBUF_NODISCARD ::acvm::acir::native::Witness* release_witness_left();
  ::acvm::acir::native::Witness* mutable_witness_left();
  void set_allocated_witness_left(::acvm::acir::native::Witness* value);
  void unsafe_arena_set_allocated_witness_left(::acvm::acir::native::Witness* value);
  ::acvm::acir::native::Witness* unsafe_arena_release_witness_left();

  private:
  const ::acvm::acir::native::Witness& _internal_witness_left() const;
  ::acvm::acir::native::Witness* _internal_mutable_witness_left();

  public:
  // .acvm.acir.native.Witness witness_right = 3;
  bool has_witness_right() const;
  void clear_witness_right() ;
  const ::acvm::acir::native::Witness& witness_right() const;
  PROTOBUF_NODISCARD ::acvm::acir::native::Witness* release_witness_right();
  ::acvm::acir::native::Witness* mutable_witness_right();
  void set_allocated_witness_right(::acvm::acir::native::Witness* value);
  void unsafe_arena_set_allocated_witness_right(::acvm::acir::native::Witness* value);
  ::acvm::acir::native::Witness* unsafe_arena_release_witness_right();

  private:
  const ::acvm::acir::native::Witness& _internal_witness_right() const;
  ::acvm::acir::native::Witness* _internal_mutable_witness_right();

  public:
  // @@protoc_insertion_point(class_scope:acvm.acir.native.Expression.MulTerm)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Expression_MulTerm& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::acvm::acir::native::Field* q_m_;
    ::acvm::acir::native::Witness* witness_left_;
    ::acvm::acir::native::Witness* witness_right_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acir_2fnative_2eproto;
};
// -------------------------------------------------------------------

class Expression_LinearCombination final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:acvm.acir.native.Expression.LinearCombination) */ {
 public:
  inline Expression_LinearCombination() : Expression_LinearCombination(nullptr) {}
  ~Expression_LinearCombination() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Expression_LinearCombination* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Expression_LinearCombination));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Expression_LinearCombination(
      ::google::protobuf::internal::ConstantInitialized);

  inline Expression_LinearCombination(const Expression_LinearCombination& from) : Expression_LinearCombination(nullptr, from) {}
  inline Expression_LinearCombination(Expression_LinearCombination&& from) noexcept
      : Expression_LinearCombination(nullptr, std::move(from)) {}
  inline Expression_LinearCombination& operator=(const Expression_LinearCombination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_LinearCombination& operator=(Expression_LinearCombination&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_LinearCombination& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_LinearCombination* internal_default_instance() {
    return reinterpret_cast<const Expression_LinearCombination*>(
        &_Expression_LinearCombination_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Expression_LinearCombination& a, Expression_LinearCombination& b) { a.Swap(&b); }
  inline void Swap(Expression_LinearCombination* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_LinearCombination* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_LinearCombination* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Expression_LinearCombination>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Expression_LinearCombination& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Expression_LinearCombination& from) { Expression_LinearCombination::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Expression_LinearCombination* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "acvm.acir.native.Expression.LinearCombination"; }

 protected:
  explicit Expression_LinearCombination(::google::protobuf::Arena* arena);
  Expression_LinearCombination(::google::protobuf::Arena* arena, const Expression_LinearCombination& from);
  Expression_LinearCombination(::google::protobuf::Arena* arena, Expression_LinearCombination&& from) noexcept
      : Expression_LinearCombination(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQLFieldNumber = 1,
    kWitnessFieldNumber = 2,
  };
  // .acvm.acir.native.Field q_l = 1;
  bool has_q_l() const;
  void clear_q_l() ;
  const ::acvm::acir::native::Field& q_l() const;
  PROTOBUF_NODISCARD ::acvm::acir::native::Field* release_q_l();
  ::acvm::acir::native::Field* mutable_q_l();
  void set_allocated_q_l(::acvm::acir::native::Field* value);
  void unsafe_arena_set_allocated_q_l(::acvm::acir::native::Field* value);
  ::acvm::acir::native::Field* unsafe_arena_release_q_l();

  private:
  const ::acvm::acir::native::Field& _internal_q_l() const;
  ::acvm::acir::native::Field* _internal_mutable_q_l();

  public:
  // .acvm.acir.native.Witness witness = 2;
  bool has_witness() const;
  void clear_witness() ;
  const ::acvm::acir::native::Witness& witness() const;
  PROTOBUF_NODISCARD ::acvm::acir::native::Witness* release_witness();
  ::acvm::acir::native::Witness* mutable_witness();
  void set_allocated_witness(::acvm::acir::native::Witness* value);
  void unsafe_arena_set_allocated_witness(::acvm::acir::native::Witness* value);
  ::acvm::acir::native::Witness* unsafe_arena_release_witness();

  private:
  const ::acvm::acir::native::Witness& _internal_witness() const;
  ::acvm::acir::native::Witness* _internal_mutable_witness();

  public:
  // @@protoc_insertion_point(class_scope:acvm.acir.native.Expression.LinearCombination)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Expression_LinearCombination& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::acvm::acir::native::Field* q_l_;
    ::acvm::acir::native::Witness* witness_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acir_2fnative_2eproto;
};
// -------------------------------------------------------------------

class Expression final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:acvm.acir.native.Expression) */ {
 public:
  inline Expression() : Expression(nullptr) {}
  ~Expression() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Expression* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Expression));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Expression(
      ::google::protobuf::internal::ConstantInitialized);

  inline Expression(const Expression& from) : Expression(nullptr, from) {}
  inline Expression(Expression&& from) noexcept
      : Expression(nullptr, std::move(from)) {}
  inline Expression& operator=(const Expression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression& operator=(Expression&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression* internal_default_instance() {
    return reinterpret_cast<const Expression*>(
        &_Expression_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Expression& a, Expression& b) { a.Swap(&b); }
  inline void Swap(Expression* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Expression>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Expression& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Expression& from) { Expression::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Expression* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "acvm.acir.native.Expression"; }

 protected:
  explicit Expression(::google::protobuf::Arena* arena);
  Expression(::google::protobuf::Arena* arena, const Expression& from);
  Expression(::google::protobuf::Arena* arena, Expression&& from) noexcept
      : Expression(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using MulTerm = Expression_MulTerm;
  using LinearCombination = Expression_LinearCombination;

  // accessors -------------------------------------------------------
  enum : int {
    kMulTermsFieldNumber = 1,
    kLinearCombinationsFieldNumber = 2,
    kQCFieldNumber = 3,
  };
  // repeated .acvm.acir.native.Expression.MulTerm mul_terms = 1;
  int mul_terms_size() const;
  private:
  int _internal_mul_terms_size() const;

  public:
  void clear_mul_terms() ;
  ::acvm::acir::native::Expression_MulTerm* mutable_mul_terms(int index);
  ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_MulTerm>* mutable_mul_terms();

  private:
  const ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_MulTerm>& _internal_mul_terms() const;
  ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_MulTerm>* _internal_mutable_mul_terms();
  public:
  const ::acvm::acir::native::Expression_MulTerm& mul_terms(int index) const;
  ::acvm::acir::native::Expression_MulTerm* add_mul_terms();
  const ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_MulTerm>& mul_terms() const;
  // repeated .acvm.acir.native.Expression.LinearCombination linear_combinations = 2;
  int linear_combinations_size() const;
  private:
  int _internal_linear_combinations_size() const;

  public:
  void clear_linear_combinations() ;
  ::acvm::acir::native::Expression_LinearCombination* mutable_linear_combinations(int index);
  ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_LinearCombination>* mutable_linear_combinations();

  private:
  const ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_LinearCombination>& _internal_linear_combinations() const;
  ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_LinearCombination>* _internal_mutable_linear_combinations();
  public:
  const ::acvm::acir::native::Expression_LinearCombination& linear_combinations(int index) const;
  ::acvm::acir::native::Expression_LinearCombination* add_linear_combinations();
  const ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_LinearCombination>& linear_combinations() const;
  // .acvm.acir.native.Field q_c = 3;
  bool has_q_c() const;
  void clear_q_c() ;
  const ::acvm::acir::native::Field& q_c() const;
  PROTOBUF_NODISCARD ::acvm::acir::native::Field* release_q_c();
  ::acvm::acir::native::Field* mutable_q_c();
  void set_allocated_q_c(::acvm::acir::native::Field* value);
  void unsafe_arena_set_allocated_q_c(::acvm::acir::native::Field* value);
  ::acvm::acir::native::Field* unsafe_arena_release_q_c();

  private:
  const ::acvm::acir::native::Field& _internal_q_c() const;
  ::acvm::acir::native::Field* _internal_mutable_q_c();

  public:
  // @@protoc_insertion_point(class_scope:acvm.acir.native.Expression)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Expression& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::acvm::acir::native::Expression_MulTerm > mul_terms_;
    ::google::protobuf::RepeatedPtrField< ::acvm::acir::native::Expression_LinearCombination > linear_combinations_;
    ::acvm::acir::native::Field* q_c_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_acir_2fnative_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Field

// bytes value = 1;
inline void Field::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Field::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.native.Field.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Field::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:acvm.acir.native.Field.value)
}
inline std::string* Field::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:acvm.acir.native.Field.value)
  return _s;
}
inline const std::string& Field::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void Field::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* Field::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* Field::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:acvm.acir.native.Field.value)
  return _impl_.value_.Release();
}
inline void Field::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:acvm.acir.native.Field.value)
}

// -------------------------------------------------------------------

// Witness

// uint32 index = 1;
inline void Witness::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0u;
}
inline ::uint32_t Witness::index() const {
  // @@protoc_insertion_point(field_get:acvm.acir.native.Witness.index)
  return _internal_index();
}
inline void Witness::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:acvm.acir.native.Witness.index)
}
inline ::uint32_t Witness::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void Witness::_internal_set_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// Expression_MulTerm

// .acvm.acir.native.Field q_m = 1;
inline bool Expression_MulTerm::has_q_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.q_m_ != nullptr);
  return value;
}
inline void Expression_MulTerm::clear_q_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.q_m_ != nullptr) _impl_.q_m_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::acvm::acir::native::Field& Expression_MulTerm::_internal_q_m() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::acvm::acir::native::Field* p = _impl_.q_m_;
  return p != nullptr ? *p : reinterpret_cast<const ::acvm::acir::native::Field&>(::acvm::acir::native::_Field_default_instance_);
}
inline const ::acvm::acir::native::Field& Expression_MulTerm::q_m() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.native.Expression.MulTerm.q_m)
  return _internal_q_m();
}
inline void Expression_MulTerm::unsafe_arena_set_allocated_q_m(::acvm::acir::native::Field* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.q_m_);
  }
  _impl_.q_m_ = reinterpret_cast<::acvm::acir::native::Field*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acvm.acir.native.Expression.MulTerm.q_m)
}
inline ::acvm::acir::native::Field* Expression_MulTerm::release_q_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acvm::acir::native::Field* released = _impl_.q_m_;
  _impl_.q_m_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::acvm::acir::native::Field* Expression_MulTerm::unsafe_arena_release_q_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:acvm.acir.native.Expression.MulTerm.q_m)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acvm::acir::native::Field* temp = _impl_.q_m_;
  _impl_.q_m_ = nullptr;
  return temp;
}
inline ::acvm::acir::native::Field* Expression_MulTerm::_internal_mutable_q_m() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.q_m_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::acvm::acir::native::Field>(GetArena());
    _impl_.q_m_ = reinterpret_cast<::acvm::acir::native::Field*>(p);
  }
  return _impl_.q_m_;
}
inline ::acvm::acir::native::Field* Expression_MulTerm::mutable_q_m() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::acvm::acir::native::Field* _msg = _internal_mutable_q_m();
  // @@protoc_insertion_point(field_mutable:acvm.acir.native.Expression.MulTerm.q_m)
  return _msg;
}
inline void Expression_MulTerm::set_allocated_q_m(::acvm::acir::native::Field* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.q_m_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.q_m_ = reinterpret_cast<::acvm::acir::native::Field*>(value);
  // @@protoc_insertion_point(field_set_allocated:acvm.acir.native.Expression.MulTerm.q_m)
}

// .acvm.acir.native.Witness witness_left = 2;
inline bool Expression_MulTerm::has_witness_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.witness_left_ != nullptr);
  return value;
}
inline void Expression_MulTerm::clear_witness_left() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.witness_left_ != nullptr) _impl_.witness_left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::acvm::acir::native::Witness& Expression_MulTerm::_internal_witness_left() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::acvm::acir::native::Witness* p = _impl_.witness_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::acvm::acir::native::Witness&>(::acvm::acir::native::_Witness_default_instance_);
}
inline const ::acvm::acir::native::Witness& Expression_MulTerm::witness_left() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.native.Expression.MulTerm.witness_left)
  return _internal_witness_left();
}
inline void Expression_MulTerm::unsafe_arena_set_allocated_witness_left(::acvm::acir::native::Witness* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.witness_left_);
  }
  _impl_.witness_left_ = reinterpret_cast<::acvm::acir::native::Witness*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acvm.acir.native.Expression.MulTerm.witness_left)
}
inline ::acvm::acir::native::Witness* Expression_MulTerm::release_witness_left() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::acvm::acir::native::Witness* released = _impl_.witness_left_;
  _impl_.witness_left_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::acvm::acir::native::Witness* Expression_MulTerm::unsafe_arena_release_witness_left() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:acvm.acir.native.Expression.MulTerm.witness_left)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::acvm::acir::native::Witness* temp = _impl_.witness_left_;
  _impl_.witness_left_ = nullptr;
  return temp;
}
inline ::acvm::acir::native::Witness* Expression_MulTerm::_internal_mutable_witness_left() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.witness_left_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::acvm::acir::native::Witness>(GetArena());
    _impl_.witness_left_ = reinterpret_cast<::acvm::acir::native::Witness*>(p);
  }
  return _impl_.witness_left_;
}
inline ::acvm::acir::native::Witness* Expression_MulTerm::mutable_witness_left() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::acvm::acir::native::Witness* _msg = _internal_mutable_witness_left();
  // @@protoc_insertion_point(field_mutable:acvm.acir.native.Expression.MulTerm.witness_left)
  return _msg;
}
inline void Expression_MulTerm::set_allocated_witness_left(::acvm::acir::native::Witness* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.witness_left_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.witness_left_ = reinterpret_cast<::acvm::acir::native::Witness*>(value);
  // @@protoc_insertion_point(field_set_allocated:acvm.acir.native.Expression.MulTerm.witness_left)
}

// .acvm.acir.native.Witness witness_right = 3;
inline bool Expression_MulTerm::has_witness_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.witness_right_ != nullptr);
  return value;
}
inline void Expression_MulTerm::clear_witness_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.witness_right_ != nullptr) _impl_.witness_right_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::acvm::acir::native::Witness& Expression_MulTerm::_internal_witness_right() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::acvm::acir::native::Witness* p = _impl_.witness_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::acvm::acir::native::Witness&>(::acvm::acir::native::_Witness_default_instance_);
}
inline const ::acvm::acir::native::Witness& Expression_MulTerm::witness_right() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.native.Expression.MulTerm.witness_right)
  return _internal_witness_right();
}
inline void Expression_MulTerm::unsafe_arena_set_allocated_witness_right(::acvm::acir::native::Witness* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.witness_right_);
  }
  _impl_.witness_right_ = reinterpret_cast<::acvm::acir::native::Witness*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acvm.acir.native.Expression.MulTerm.witness_right)
}
inline ::acvm::acir::native::Witness* Expression_MulTerm::release_witness_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::acvm::acir::native::Witness* released = _impl_.witness_right_;
  _impl_.witness_right_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::acvm::acir::native::Witness* Expression_MulTerm::unsafe_arena_release_witness_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:acvm.acir.native.Expression.MulTerm.witness_right)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::acvm::acir::native::Witness* temp = _impl_.witness_right_;
  _impl_.witness_right_ = nullptr;
  return temp;
}
inline ::acvm::acir::native::Witness* Expression_MulTerm::_internal_mutable_witness_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.witness_right_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::acvm::acir::native::Witness>(GetArena());
    _impl_.witness_right_ = reinterpret_cast<::acvm::acir::native::Witness*>(p);
  }
  return _impl_.witness_right_;
}
inline ::acvm::acir::native::Witness* Expression_MulTerm::mutable_witness_right() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::acvm::acir::native::Witness* _msg = _internal_mutable_witness_right();
  // @@protoc_insertion_point(field_mutable:acvm.acir.native.Expression.MulTerm.witness_right)
  return _msg;
}
inline void Expression_MulTerm::set_allocated_witness_right(::acvm::acir::native::Witness* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.witness_right_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.witness_right_ = reinterpret_cast<::acvm::acir::native::Witness*>(value);
  // @@protoc_insertion_point(field_set_allocated:acvm.acir.native.Expression.MulTerm.witness_right)
}

// -------------------------------------------------------------------

// Expression_LinearCombination

// .acvm.acir.native.Field q_l = 1;
inline bool Expression_LinearCombination::has_q_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.q_l_ != nullptr);
  return value;
}
inline void Expression_LinearCombination::clear_q_l() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.q_l_ != nullptr) _impl_.q_l_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::acvm::acir::native::Field& Expression_LinearCombination::_internal_q_l() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::acvm::acir::native::Field* p = _impl_.q_l_;
  return p != nullptr ? *p : reinterpret_cast<const ::acvm::acir::native::Field&>(::acvm::acir::native::_Field_default_instance_);
}
inline const ::acvm::acir::native::Field& Expression_LinearCombination::q_l() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.native.Expression.LinearCombination.q_l)
  return _internal_q_l();
}
inline void Expression_LinearCombination::unsafe_arena_set_allocated_q_l(::acvm::acir::native::Field* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.q_l_);
  }
  _impl_.q_l_ = reinterpret_cast<::acvm::acir::native::Field*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acvm.acir.native.Expression.LinearCombination.q_l)
}
inline ::acvm::acir::native::Field* Expression_LinearCombination::release_q_l() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acvm::acir::native::Field* released = _impl_.q_l_;
  _impl_.q_l_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::acvm::acir::native::Field* Expression_LinearCombination::unsafe_arena_release_q_l() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:acvm.acir.native.Expression.LinearCombination.q_l)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acvm::acir::native::Field* temp = _impl_.q_l_;
  _impl_.q_l_ = nullptr;
  return temp;
}
inline ::acvm::acir::native::Field* Expression_LinearCombination::_internal_mutable_q_l() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.q_l_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::acvm::acir::native::Field>(GetArena());
    _impl_.q_l_ = reinterpret_cast<::acvm::acir::native::Field*>(p);
  }
  return _impl_.q_l_;
}
inline ::acvm::acir::native::Field* Expression_LinearCombination::mutable_q_l() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::acvm::acir::native::Field* _msg = _internal_mutable_q_l();
  // @@protoc_insertion_point(field_mutable:acvm.acir.native.Expression.LinearCombination.q_l)
  return _msg;
}
inline void Expression_LinearCombination::set_allocated_q_l(::acvm::acir::native::Field* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.q_l_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.q_l_ = reinterpret_cast<::acvm::acir::native::Field*>(value);
  // @@protoc_insertion_point(field_set_allocated:acvm.acir.native.Expression.LinearCombination.q_l)
}

// .acvm.acir.native.Witness witness = 2;
inline bool Expression_LinearCombination::has_witness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.witness_ != nullptr);
  return value;
}
inline void Expression_LinearCombination::clear_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.witness_ != nullptr) _impl_.witness_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::acvm::acir::native::Witness& Expression_LinearCombination::_internal_witness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::acvm::acir::native::Witness* p = _impl_.witness_;
  return p != nullptr ? *p : reinterpret_cast<const ::acvm::acir::native::Witness&>(::acvm::acir::native::_Witness_default_instance_);
}
inline const ::acvm::acir::native::Witness& Expression_LinearCombination::witness() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.native.Expression.LinearCombination.witness)
  return _internal_witness();
}
inline void Expression_LinearCombination::unsafe_arena_set_allocated_witness(::acvm::acir::native::Witness* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.witness_);
  }
  _impl_.witness_ = reinterpret_cast<::acvm::acir::native::Witness*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acvm.acir.native.Expression.LinearCombination.witness)
}
inline ::acvm::acir::native::Witness* Expression_LinearCombination::release_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::acvm::acir::native::Witness* released = _impl_.witness_;
  _impl_.witness_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::acvm::acir::native::Witness* Expression_LinearCombination::unsafe_arena_release_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:acvm.acir.native.Expression.LinearCombination.witness)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::acvm::acir::native::Witness* temp = _impl_.witness_;
  _impl_.witness_ = nullptr;
  return temp;
}
inline ::acvm::acir::native::Witness* Expression_LinearCombination::_internal_mutable_witness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.witness_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::acvm::acir::native::Witness>(GetArena());
    _impl_.witness_ = reinterpret_cast<::acvm::acir::native::Witness*>(p);
  }
  return _impl_.witness_;
}
inline ::acvm::acir::native::Witness* Expression_LinearCombination::mutable_witness() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::acvm::acir::native::Witness* _msg = _internal_mutable_witness();
  // @@protoc_insertion_point(field_mutable:acvm.acir.native.Expression.LinearCombination.witness)
  return _msg;
}
inline void Expression_LinearCombination::set_allocated_witness(::acvm::acir::native::Witness* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.witness_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.witness_ = reinterpret_cast<::acvm::acir::native::Witness*>(value);
  // @@protoc_insertion_point(field_set_allocated:acvm.acir.native.Expression.LinearCombination.witness)
}

// -------------------------------------------------------------------

// Expression

// repeated .acvm.acir.native.Expression.MulTerm mul_terms = 1;
inline int Expression::_internal_mul_terms_size() const {
  return _internal_mul_terms().size();
}
inline int Expression::mul_terms_size() const {
  return _internal_mul_terms_size();
}
inline void Expression::clear_mul_terms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mul_terms_.Clear();
}
inline ::acvm::acir::native::Expression_MulTerm* Expression::mutable_mul_terms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:acvm.acir.native.Expression.mul_terms)
  return _internal_mutable_mul_terms()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_MulTerm>* Expression::mutable_mul_terms()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:acvm.acir.native.Expression.mul_terms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_mul_terms();
}
inline const ::acvm::acir::native::Expression_MulTerm& Expression::mul_terms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.native.Expression.mul_terms)
  return _internal_mul_terms().Get(index);
}
inline ::acvm::acir::native::Expression_MulTerm* Expression::add_mul_terms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::acvm::acir::native::Expression_MulTerm* _add = _internal_mutable_mul_terms()->Add();
  // @@protoc_insertion_point(field_add:acvm.acir.native.Expression.mul_terms)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_MulTerm>& Expression::mul_terms() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:acvm.acir.native.Expression.mul_terms)
  return _internal_mul_terms();
}
inline const ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_MulTerm>&
Expression::_internal_mul_terms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mul_terms_;
}
inline ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_MulTerm>*
Expression::_internal_mutable_mul_terms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.mul_terms_;
}

// repeated .acvm.acir.native.Expression.LinearCombination linear_combinations = 2;
inline int Expression::_internal_linear_combinations_size() const {
  return _internal_linear_combinations().size();
}
inline int Expression::linear_combinations_size() const {
  return _internal_linear_combinations_size();
}
inline void Expression::clear_linear_combinations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.linear_combinations_.Clear();
}
inline ::acvm::acir::native::Expression_LinearCombination* Expression::mutable_linear_combinations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:acvm.acir.native.Expression.linear_combinations)
  return _internal_mutable_linear_combinations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_LinearCombination>* Expression::mutable_linear_combinations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:acvm.acir.native.Expression.linear_combinations)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_linear_combinations();
}
inline const ::acvm::acir::native::Expression_LinearCombination& Expression::linear_combinations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.native.Expression.linear_combinations)
  return _internal_linear_combinations().Get(index);
}
inline ::acvm::acir::native::Expression_LinearCombination* Expression::add_linear_combinations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::acvm::acir::native::Expression_LinearCombination* _add = _internal_mutable_linear_combinations()->Add();
  // @@protoc_insertion_point(field_add:acvm.acir.native.Expression.linear_combinations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_LinearCombination>& Expression::linear_combinations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:acvm.acir.native.Expression.linear_combinations)
  return _internal_linear_combinations();
}
inline const ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_LinearCombination>&
Expression::_internal_linear_combinations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.linear_combinations_;
}
inline ::google::protobuf::RepeatedPtrField<::acvm::acir::native::Expression_LinearCombination>*
Expression::_internal_mutable_linear_combinations() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.linear_combinations_;
}

// .acvm.acir.native.Field q_c = 3;
inline bool Expression::has_q_c() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.q_c_ != nullptr);
  return value;
}
inline void Expression::clear_q_c() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.q_c_ != nullptr) _impl_.q_c_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::acvm::acir::native::Field& Expression::_internal_q_c() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::acvm::acir::native::Field* p = _impl_.q_c_;
  return p != nullptr ? *p : reinterpret_cast<const ::acvm::acir::native::Field&>(::acvm::acir::native::_Field_default_instance_);
}
inline const ::acvm::acir::native::Field& Expression::q_c() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:acvm.acir.native.Expression.q_c)
  return _internal_q_c();
}
inline void Expression::unsafe_arena_set_allocated_q_c(::acvm::acir::native::Field* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.q_c_);
  }
  _impl_.q_c_ = reinterpret_cast<::acvm::acir::native::Field*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:acvm.acir.native.Expression.q_c)
}
inline ::acvm::acir::native::Field* Expression::release_q_c() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acvm::acir::native::Field* released = _impl_.q_c_;
  _impl_.q_c_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::acvm::acir::native::Field* Expression::unsafe_arena_release_q_c() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:acvm.acir.native.Expression.q_c)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::acvm::acir::native::Field* temp = _impl_.q_c_;
  _impl_.q_c_ = nullptr;
  return temp;
}
inline ::acvm::acir::native::Field* Expression::_internal_mutable_q_c() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.q_c_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::acvm::acir::native::Field>(GetArena());
    _impl_.q_c_ = reinterpret_cast<::acvm::acir::native::Field*>(p);
  }
  return _impl_.q_c_;
}
inline ::acvm::acir::native::Field* Expression::mutable_q_c() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::acvm::acir::native::Field* _msg = _internal_mutable_q_c();
  // @@protoc_insertion_point(field_mutable:acvm.acir.native.Expression.q_c)
  return _msg;
}
inline void Expression::set_allocated_q_c(::acvm::acir::native::Field* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.q_c_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.q_c_ = reinterpret_cast<::acvm::acir::native::Field*>(value);
  // @@protoc_insertion_point(field_set_allocated:acvm.acir.native.Expression.q_c)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace native
}  // namespace acir
}  // namespace acvm


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // acir_2fnative_2eproto_2epb_2eh
